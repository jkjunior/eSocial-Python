#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Wed Oct 10 14:18:14 2018 by generateDS.py version 2.29.24.
# Python 3.6.5 (default, May 11 2018, 13:30:17)  [GCC 7.3.0]
#
# Command line options:
#   ('-o', 'classes/evtAltCadastral.py')
#   ('-s', 'classes/evtAltCadastralSub.py')
#   ('--super', 'evtAltCadastral')
#
# Command line arguments:
#   /home/joao/Documents/teste_xsd/xsd/evtAltCadastral.xsd
#
# Command line:
#   /home/joao/Documents/teste_xsd/dkuhlman-generateds-60c208fd6e8d/generateDS.py -o "classes/evtAltCadastral.py" -s "classes/evtAltCadastralSub.py" --super="evtAltCadastral" /home/joao/Documents/teste_xsd/xsd/evtAltCadastral.xsd
#
# Current working directory (os.getcwd()):
#   teste_xsd
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class ufCnhType(object):
    AC='AC'
    AL='AL'
    AP='AP'
    AM='AM'
    BA='BA'
    CE='CE'
    DF='DF'
    ES='ES'
    GO='GO'
    MA='MA'
    MT='MT'
    MS='MS'
    MG='MG'
    PA='PA'
    PB='PB'
    PR='PR'
    PE='PE'
    PI='PI'
    RJ='RJ'
    RN='RN'
    RS='RS'
    RO='RO'
    RR='RR'
    SC='SC'
    SP='SP'
    SE='SE'
    TO='TO'


class ufCtpsType(object):
    AC='AC'
    AL='AL'
    AP='AP'
    AM='AM'
    BA='BA'
    CE='CE'
    DF='DF'
    ES='ES'
    GO='GO'
    MA='MA'
    MT='MT'
    MS='MS'
    MG='MG'
    PA='PA'
    PB='PB'
    PR='PR'
    PE='PE'
    PI='PI'
    RJ='RJ'
    RN='RN'
    RS='RS'
    RO='RO'
    RR='RR'
    SC='SC'
    SP='SP'
    SE='SE'
    TO='TO'


class ufType(object):
    AC='AC'
    AL='AL'
    AP='AP'
    AM='AM'
    BA='BA'
    CE='CE'
    DF='DF'
    ES='ES'
    GO='GO'
    MA='MA'
    MT='MT'
    MS='MS'
    MG='MG'
    PA='PA'
    PB='PB'
    PR='PR'
    PE='PE'
    PI='PI'
    RJ='RJ'
    RN='RN'
    RS='RS'
    RO='RO'
    RR='RR'
    SC='SC'
    SP='SP'
    SE='SE'
    TO='TO'


class ufType10(object):
    AC='AC'
    AL='AL'
    AP='AP'
    AM='AM'
    BA='BA'
    CE='CE'
    DF='DF'
    ES='ES'
    GO='GO'
    MA='MA'
    MT='MT'
    MS='MS'
    MG='MG'
    PA='PA'
    PB='PB'
    PR='PR'
    PE='PE'
    PI='PI'
    RJ='RJ'
    RN='RN'
    RS='RS'
    RO='RO'
    RR='RR'
    SC='SC'
    SP='SP'
    SE='SE'
    TO='TO'


class eSocial(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, evtAltCadastral=None, Signature=None):
        self.original_tagname_ = None
        self.evtAltCadastral = evtAltCadastral
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, eSocial)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if eSocial.subclass:
            return eSocial.subclass(*args_, **kwargs_)
        else:
            return eSocial(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_evtAltCadastral(self): return self.evtAltCadastral
    def set_evtAltCadastral(self, evtAltCadastral): self.evtAltCadastral = evtAltCadastral
    def get_Signature(self): return self.Signature
    def set_Signature(self, Signature): self.Signature = Signature
    def hasContent_(self):
        if (
            self.evtAltCadastral is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='eSocial', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('eSocial')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='eSocial')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='eSocial', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='eSocial'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='eSocial', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.evtAltCadastral is not None:
            self.evtAltCadastral.export(outfile, level, namespaceprefix_, name_='evtAltCadastral', pretty_print=pretty_print)
        if self.Signature is not None:
            self.Signature.export(outfile, level, namespaceprefix_='ds:', name_='Signature', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'evtAltCadastral':
            obj_ = evtAltCadastralType.factory()
            obj_.build(child_)
            self.evtAltCadastral = obj_
            obj_.original_tagname_ = 'evtAltCadastral'
        elif nodeName_ == 'Signature':
            obj_ = SignatureType.factory()
            obj_.build(child_)
            self.Signature = obj_
            obj_.original_tagname_ = 'Signature'
# end class eSocial


class TIdeEveTrab(GeneratedsSuper):
    """Identificação do evento"""
    subclass = None
    superclass = None
    def __init__(self, indRetif=None, nrRecibo=None, tpAmb=None, procEmi=None, verProc=None):
        self.original_tagname_ = None
        self.indRetif = indRetif
        self.validate_indRetifType(self.indRetif)
        self.nrRecibo = nrRecibo
        self.validate_nrReciboType(self.nrRecibo)
        self.tpAmb = tpAmb
        self.validate_tpAmbType(self.tpAmb)
        self.procEmi = procEmi
        self.validate_procEmiType(self.procEmi)
        self.verProc = verProc
        self.validate_verProcType(self.verProc)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TIdeEveTrab)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TIdeEveTrab.subclass:
            return TIdeEveTrab.subclass(*args_, **kwargs_)
        else:
            return TIdeEveTrab(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_indRetif(self): return self.indRetif
    def set_indRetif(self, indRetif): self.indRetif = indRetif
    def get_nrRecibo(self): return self.nrRecibo
    def set_nrRecibo(self, nrRecibo): self.nrRecibo = nrRecibo
    def get_tpAmb(self): return self.tpAmb
    def set_tpAmb(self, tpAmb): self.tpAmb = tpAmb
    def get_procEmi(self): return self.procEmi
    def set_procEmi(self, procEmi): self.procEmi = procEmi
    def get_verProc(self): return self.verProc
    def set_verProc(self, verProc): self.verProc = verProc
    def validate_indRetifType(self, value):
        # Validate type indRetifType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_indRetifType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_indRetifType_patterns_, ))
    validate_indRetifType_patterns_ = [['^\\d$']]
    def validate_nrReciboType(self, value):
        # Validate type nrReciboType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 40:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrReciboType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrReciboType' % {"value" : value.encode("utf-8")} )
    def validate_tpAmbType(self, value):
        # Validate type tpAmbType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpAmbType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpAmbType_patterns_, ))
    validate_tpAmbType_patterns_ = [['^\\d$']]
    def validate_procEmiType(self, value):
        # Validate type procEmiType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_procEmiType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_procEmiType_patterns_, ))
    validate_procEmiType_patterns_ = [['^\\d$']]
    def validate_verProcType(self, value):
        # Validate type verProcType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on verProcType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on verProcType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.indRetif is not None or
            self.nrRecibo is not None or
            self.tpAmb is not None or
            self.procEmi is not None or
            self.verProc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TIdeEveTrab', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TIdeEveTrab')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TIdeEveTrab')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TIdeEveTrab', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TIdeEveTrab'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TIdeEveTrab', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.indRetif is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<indRetif>%s</indRetif>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.indRetif), input_name='indRetif')), eol_))
        if self.nrRecibo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrRecibo>%s</nrRecibo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrRecibo), input_name='nrRecibo')), eol_))
        if self.tpAmb is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tpAmb>%s</tpAmb>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tpAmb), input_name='tpAmb')), eol_))
        if self.procEmi is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<procEmi>%s</procEmi>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.procEmi), input_name='procEmi')), eol_))
        if self.verProc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<verProc>%s</verProc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.verProc), input_name='verProc')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'indRetif':
            indRetif_ = child_.text
            indRetif_ = self.gds_validate_string(indRetif_, node, 'indRetif')
            self.indRetif = indRetif_
            # validate type indRetifType
            self.validate_indRetifType(self.indRetif)
        elif nodeName_ == 'nrRecibo':
            nrRecibo_ = child_.text
            nrRecibo_ = self.gds_validate_string(nrRecibo_, node, 'nrRecibo')
            self.nrRecibo = nrRecibo_
            # validate type nrReciboType
            self.validate_nrReciboType(self.nrRecibo)
        elif nodeName_ == 'tpAmb':
            tpAmb_ = child_.text
            tpAmb_ = self.gds_validate_string(tpAmb_, node, 'tpAmb')
            self.tpAmb = tpAmb_
            # validate type tpAmbType
            self.validate_tpAmbType(self.tpAmb)
        elif nodeName_ == 'procEmi':
            procEmi_ = child_.text
            procEmi_ = self.gds_validate_string(procEmi_, node, 'procEmi')
            self.procEmi = procEmi_
            # validate type procEmiType
            self.validate_procEmiType(self.procEmi)
        elif nodeName_ == 'verProc':
            verProc_ = child_.text
            verProc_ = self.gds_validate_string(verProc_, node, 'verProc')
            self.verProc = verProc_
            # validate type verProcType
            self.validate_verProcType(self.verProc)
# end class TIdeEveTrab


class TEmpregador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tpInsc=None, nrInsc=None):
        self.original_tagname_ = None
        self.tpInsc = tpInsc
        self.validate_tpInscType(self.tpInsc)
        self.nrInsc = nrInsc
        self.validate_nrInscType(self.nrInsc)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TEmpregador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TEmpregador.subclass:
            return TEmpregador.subclass(*args_, **kwargs_)
        else:
            return TEmpregador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tpInsc(self): return self.tpInsc
    def set_tpInsc(self, tpInsc): self.tpInsc = tpInsc
    def get_nrInsc(self): return self.nrInsc
    def set_nrInsc(self, nrInsc): self.nrInsc = nrInsc
    def validate_tpInscType(self, value):
        # Validate type tpInscType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tpInscType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tpInscType_patterns_, ))
    validate_tpInscType_patterns_ = [['^\\d$']]
    def validate_nrInscType(self, value):
        # Validate type nrInscType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_nrInscType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_nrInscType_patterns_, ))
    validate_nrInscType_patterns_ = [['^\\d{8,15}$']]
    def hasContent_(self):
        if (
            self.tpInsc is not None or
            self.nrInsc is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TEmpregador', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TEmpregador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TEmpregador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TEmpregador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TEmpregador'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TEmpregador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpInsc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tpInsc>%s</tpInsc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tpInsc), input_name='tpInsc')), eol_))
        if self.nrInsc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrInsc>%s</nrInsc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrInsc), input_name='nrInsc')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpInsc':
            tpInsc_ = child_.text
            tpInsc_ = self.gds_validate_string(tpInsc_, node, 'tpInsc')
            self.tpInsc = tpInsc_
            # validate type tpInscType
            self.validate_tpInscType(self.tpInsc)
        elif nodeName_ == 'nrInsc':
            nrInsc_ = child_.text
            nrInsc_ = self.gds_validate_string(nrInsc_, node, 'nrInsc')
            self.nrInsc = nrInsc_
            # validate type nrInscType
            self.validate_nrInscType(self.nrInsc)
# end class TEmpregador


class TCtps(GeneratedsSuper):
    """Carteira de Trabalho e Previdência Social"""
    subclass = None
    superclass = None
    def __init__(self, nrCtps=None, serieCtps=None, ufCtps=None):
        self.original_tagname_ = None
        self.nrCtps = nrCtps
        self.validate_nrCtpsType(self.nrCtps)
        self.serieCtps = serieCtps
        self.validate_serieCtpsType(self.serieCtps)
        self.ufCtps = ufCtps
        self.validate_ufCtpsType(self.ufCtps)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TCtps)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TCtps.subclass:
            return TCtps.subclass(*args_, **kwargs_)
        else:
            return TCtps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrCtps(self): return self.nrCtps
    def set_nrCtps(self, nrCtps): self.nrCtps = nrCtps
    def get_serieCtps(self): return self.serieCtps
    def set_serieCtps(self, serieCtps): self.serieCtps = serieCtps
    def get_ufCtps(self): return self.ufCtps
    def set_ufCtps(self, ufCtps): self.ufCtps = ufCtps
    def validate_nrCtpsType(self, value):
        # Validate type nrCtpsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrCtpsType' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrCtpsType' % {"value" : value.encode("utf-8")} )
    def validate_serieCtpsType(self, value):
        # Validate type serieCtpsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on serieCtpsType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on serieCtpsType' % {"value" : value.encode("utf-8")} )
    def validate_ufCtpsType(self, value):
        # Validate type ufCtpsType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ufCtpsType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nrCtps is not None or
            self.serieCtps is not None or
            self.ufCtps is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TCtps', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TCtps')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TCtps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TCtps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TCtps'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TCtps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrCtps is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrCtps>%s</nrCtps>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrCtps), input_name='nrCtps')), eol_))
        if self.serieCtps is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<serieCtps>%s</serieCtps>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.serieCtps), input_name='serieCtps')), eol_))
        if self.ufCtps is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ufCtps>%s</ufCtps>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ufCtps), input_name='ufCtps')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrCtps':
            nrCtps_ = child_.text
            nrCtps_ = self.gds_validate_string(nrCtps_, node, 'nrCtps')
            self.nrCtps = nrCtps_
            # validate type nrCtpsType
            self.validate_nrCtpsType(self.nrCtps)
        elif nodeName_ == 'serieCtps':
            serieCtps_ = child_.text
            serieCtps_ = self.gds_validate_string(serieCtps_, node, 'serieCtps')
            self.serieCtps = serieCtps_
            # validate type serieCtpsType
            self.validate_serieCtpsType(self.serieCtps)
        elif nodeName_ == 'ufCtps':
            ufCtps_ = child_.text
            ufCtps_ = self.gds_validate_string(ufCtps_, node, 'ufCtps')
            self.ufCtps = ufCtps_
            # validate type ufCtpsType
            self.validate_ufCtpsType(self.ufCtps)
# end class TCtps


class TRic(GeneratedsSuper):
    """Registro de Identificação Civil"""
    subclass = None
    superclass = None
    def __init__(self, nrRic=None, orgaoEmissor=None, dtExped=None):
        self.original_tagname_ = None
        self.nrRic = nrRic
        self.validate_nrRicType(self.nrRic)
        self.orgaoEmissor = orgaoEmissor
        self.validate_orgaoEmissorType(self.orgaoEmissor)
        if isinstance(dtExped, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtExped, '%Y-%m-%d').date()
        else:
            initvalue_ = dtExped
        self.dtExped = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRic)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRic.subclass:
            return TRic.subclass(*args_, **kwargs_)
        else:
            return TRic(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrRic(self): return self.nrRic
    def set_nrRic(self, nrRic): self.nrRic = nrRic
    def get_orgaoEmissor(self): return self.orgaoEmissor
    def set_orgaoEmissor(self, orgaoEmissor): self.orgaoEmissor = orgaoEmissor
    def get_dtExped(self): return self.dtExped
    def set_dtExped(self, dtExped): self.dtExped = dtExped
    def validate_nrRicType(self, value):
        # Validate type nrRicType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrRicType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrRicType' % {"value" : value.encode("utf-8")} )
    def validate_orgaoEmissorType(self, value):
        # Validate type orgaoEmissorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on orgaoEmissorType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on orgaoEmissorType' % {"value" : value.encode("utf-8")} )
    def validate_dtExpedType(self, value):
        # Validate type dtExpedType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.nrRic is not None or
            self.orgaoEmissor is not None or
            self.dtExped is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TRic', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRic')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TRic')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TRic', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TRic'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TRic', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrRic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrRic>%s</nrRic>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrRic), input_name='nrRic')), eol_))
        if self.orgaoEmissor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<orgaoEmissor>%s</orgaoEmissor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.orgaoEmissor), input_name='orgaoEmissor')), eol_))
        if self.dtExped is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtExped>%s</dtExped>%s' % (self.gds_format_date(self.dtExped, input_name='dtExped'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrRic':
            nrRic_ = child_.text
            nrRic_ = self.gds_validate_string(nrRic_, node, 'nrRic')
            self.nrRic = nrRic_
            # validate type nrRicType
            self.validate_nrRicType(self.nrRic)
        elif nodeName_ == 'orgaoEmissor':
            orgaoEmissor_ = child_.text
            orgaoEmissor_ = self.gds_validate_string(orgaoEmissor_, node, 'orgaoEmissor')
            self.orgaoEmissor = orgaoEmissor_
            # validate type orgaoEmissorType
            self.validate_orgaoEmissorType(self.orgaoEmissor)
        elif nodeName_ == 'dtExped':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtExped = dval_
            # validate type dtExpedType
            self.validate_dtExpedType(self.dtExped)
# end class TRic


class TRg(GeneratedsSuper):
    """Registro Geral"""
    subclass = None
    superclass = None
    def __init__(self, nrRg=None, orgaoEmissor=None, dtExped=None):
        self.original_tagname_ = None
        self.nrRg = nrRg
        self.validate_nrRgType(self.nrRg)
        self.orgaoEmissor = orgaoEmissor
        self.validate_orgaoEmissorType1(self.orgaoEmissor)
        if isinstance(dtExped, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtExped, '%Y-%m-%d').date()
        else:
            initvalue_ = dtExped
        self.dtExped = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRg)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRg.subclass:
            return TRg.subclass(*args_, **kwargs_)
        else:
            return TRg(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrRg(self): return self.nrRg
    def set_nrRg(self, nrRg): self.nrRg = nrRg
    def get_orgaoEmissor(self): return self.orgaoEmissor
    def set_orgaoEmissor(self, orgaoEmissor): self.orgaoEmissor = orgaoEmissor
    def get_dtExped(self): return self.dtExped
    def set_dtExped(self, dtExped): self.dtExped = dtExped
    def validate_nrRgType(self, value):
        # Validate type nrRgType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrRgType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrRgType' % {"value" : value.encode("utf-8")} )
    def validate_orgaoEmissorType1(self, value):
        # Validate type orgaoEmissorType1, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on orgaoEmissorType1' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on orgaoEmissorType1' % {"value" : value.encode("utf-8")} )
    def validate_dtExpedType2(self, value):
        # Validate type dtExpedType2, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.nrRg is not None or
            self.orgaoEmissor is not None or
            self.dtExped is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TRg', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRg')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TRg')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TRg', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TRg'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TRg', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrRg is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrRg>%s</nrRg>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrRg), input_name='nrRg')), eol_))
        if self.orgaoEmissor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<orgaoEmissor>%s</orgaoEmissor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.orgaoEmissor), input_name='orgaoEmissor')), eol_))
        if self.dtExped is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtExped>%s</dtExped>%s' % (self.gds_format_date(self.dtExped, input_name='dtExped'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrRg':
            nrRg_ = child_.text
            nrRg_ = self.gds_validate_string(nrRg_, node, 'nrRg')
            self.nrRg = nrRg_
            # validate type nrRgType
            self.validate_nrRgType(self.nrRg)
        elif nodeName_ == 'orgaoEmissor':
            orgaoEmissor_ = child_.text
            orgaoEmissor_ = self.gds_validate_string(orgaoEmissor_, node, 'orgaoEmissor')
            self.orgaoEmissor = orgaoEmissor_
            # validate type orgaoEmissorType1
            self.validate_orgaoEmissorType1(self.orgaoEmissor)
        elif nodeName_ == 'dtExped':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtExped = dval_
            # validate type dtExpedType2
            self.validate_dtExpedType2(self.dtExped)
# end class TRg


class TRne(GeneratedsSuper):
    """Registro Nacional de Estrangeiros"""
    subclass = None
    superclass = None
    def __init__(self, nrRne=None, orgaoEmissor=None, dtExped=None):
        self.original_tagname_ = None
        self.nrRne = nrRne
        self.validate_nrRneType(self.nrRne)
        self.orgaoEmissor = orgaoEmissor
        self.validate_orgaoEmissorType3(self.orgaoEmissor)
        if isinstance(dtExped, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtExped, '%Y-%m-%d').date()
        else:
            initvalue_ = dtExped
        self.dtExped = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRne)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRne.subclass:
            return TRne.subclass(*args_, **kwargs_)
        else:
            return TRne(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrRne(self): return self.nrRne
    def set_nrRne(self, nrRne): self.nrRne = nrRne
    def get_orgaoEmissor(self): return self.orgaoEmissor
    def set_orgaoEmissor(self, orgaoEmissor): self.orgaoEmissor = orgaoEmissor
    def get_dtExped(self): return self.dtExped
    def set_dtExped(self, dtExped): self.dtExped = dtExped
    def validate_nrRneType(self, value):
        # Validate type nrRneType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrRneType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrRneType' % {"value" : value.encode("utf-8")} )
    def validate_orgaoEmissorType3(self, value):
        # Validate type orgaoEmissorType3, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on orgaoEmissorType3' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on orgaoEmissorType3' % {"value" : value.encode("utf-8")} )
    def validate_dtExpedType4(self, value):
        # Validate type dtExpedType4, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.nrRne is not None or
            self.orgaoEmissor is not None or
            self.dtExped is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TRne', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRne')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TRne')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TRne', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TRne'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TRne', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrRne is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrRne>%s</nrRne>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrRne), input_name='nrRne')), eol_))
        if self.orgaoEmissor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<orgaoEmissor>%s</orgaoEmissor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.orgaoEmissor), input_name='orgaoEmissor')), eol_))
        if self.dtExped is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtExped>%s</dtExped>%s' % (self.gds_format_date(self.dtExped, input_name='dtExped'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrRne':
            nrRne_ = child_.text
            nrRne_ = self.gds_validate_string(nrRne_, node, 'nrRne')
            self.nrRne = nrRne_
            # validate type nrRneType
            self.validate_nrRneType(self.nrRne)
        elif nodeName_ == 'orgaoEmissor':
            orgaoEmissor_ = child_.text
            orgaoEmissor_ = self.gds_validate_string(orgaoEmissor_, node, 'orgaoEmissor')
            self.orgaoEmissor = orgaoEmissor_
            # validate type orgaoEmissorType3
            self.validate_orgaoEmissorType3(self.orgaoEmissor)
        elif nodeName_ == 'dtExped':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtExped = dval_
            # validate type dtExpedType4
            self.validate_dtExpedType4(self.dtExped)
# end class TRne


class TOc(GeneratedsSuper):
    """Órgão de Classe"""
    subclass = None
    superclass = None
    def __init__(self, nrOc=None, orgaoEmissor=None, dtExped=None, dtValid=None):
        self.original_tagname_ = None
        self.nrOc = nrOc
        self.validate_nrOcType(self.nrOc)
        self.orgaoEmissor = orgaoEmissor
        self.validate_orgaoEmissorType5(self.orgaoEmissor)
        if isinstance(dtExped, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtExped, '%Y-%m-%d').date()
        else:
            initvalue_ = dtExped
        self.dtExped = initvalue_
        if isinstance(dtValid, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtValid, '%Y-%m-%d').date()
        else:
            initvalue_ = dtValid
        self.dtValid = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TOc)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TOc.subclass:
            return TOc.subclass(*args_, **kwargs_)
        else:
            return TOc(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrOc(self): return self.nrOc
    def set_nrOc(self, nrOc): self.nrOc = nrOc
    def get_orgaoEmissor(self): return self.orgaoEmissor
    def set_orgaoEmissor(self, orgaoEmissor): self.orgaoEmissor = orgaoEmissor
    def get_dtExped(self): return self.dtExped
    def set_dtExped(self, dtExped): self.dtExped = dtExped
    def get_dtValid(self): return self.dtValid
    def set_dtValid(self, dtValid): self.dtValid = dtValid
    def validate_nrOcType(self, value):
        # Validate type nrOcType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 14:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrOcType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrOcType' % {"value" : value.encode("utf-8")} )
    def validate_orgaoEmissorType5(self, value):
        # Validate type orgaoEmissorType5, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on orgaoEmissorType5' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on orgaoEmissorType5' % {"value" : value.encode("utf-8")} )
    def validate_dtExpedType6(self, value):
        # Validate type dtExpedType6, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dtValidType(self, value):
        # Validate type dtValidType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.nrOc is not None or
            self.orgaoEmissor is not None or
            self.dtExped is not None or
            self.dtValid is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TOc', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TOc')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TOc')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TOc', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TOc'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TOc', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrOc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrOc>%s</nrOc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrOc), input_name='nrOc')), eol_))
        if self.orgaoEmissor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<orgaoEmissor>%s</orgaoEmissor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.orgaoEmissor), input_name='orgaoEmissor')), eol_))
        if self.dtExped is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtExped>%s</dtExped>%s' % (self.gds_format_date(self.dtExped, input_name='dtExped'), eol_))
        if self.dtValid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtValid>%s</dtValid>%s' % (self.gds_format_date(self.dtValid, input_name='dtValid'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrOc':
            nrOc_ = child_.text
            nrOc_ = self.gds_validate_string(nrOc_, node, 'nrOc')
            self.nrOc = nrOc_
            # validate type nrOcType
            self.validate_nrOcType(self.nrOc)
        elif nodeName_ == 'orgaoEmissor':
            orgaoEmissor_ = child_.text
            orgaoEmissor_ = self.gds_validate_string(orgaoEmissor_, node, 'orgaoEmissor')
            self.orgaoEmissor = orgaoEmissor_
            # validate type orgaoEmissorType5
            self.validate_orgaoEmissorType5(self.orgaoEmissor)
        elif nodeName_ == 'dtExped':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtExped = dval_
            # validate type dtExpedType6
            self.validate_dtExpedType6(self.dtExped)
        elif nodeName_ == 'dtValid':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtValid = dval_
            # validate type dtValidType
            self.validate_dtValidType(self.dtValid)
# end class TOc


class TCnh(GeneratedsSuper):
    """Cartera Nacional de Habilitação"""
    subclass = None
    superclass = None
    def __init__(self, nrRegCnh=None, dtExped=None, ufCnh=None, dtValid=None, dtPriHab=None, categoriaCnh=None):
        self.original_tagname_ = None
        self.nrRegCnh = nrRegCnh
        self.validate_nrRegCnhType(self.nrRegCnh)
        if isinstance(dtExped, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtExped, '%Y-%m-%d').date()
        else:
            initvalue_ = dtExped
        self.dtExped = initvalue_
        self.ufCnh = ufCnh
        self.validate_ufCnhType(self.ufCnh)
        if isinstance(dtValid, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtValid, '%Y-%m-%d').date()
        else:
            initvalue_ = dtValid
        self.dtValid = initvalue_
        if isinstance(dtPriHab, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtPriHab, '%Y-%m-%d').date()
        else:
            initvalue_ = dtPriHab
        self.dtPriHab = initvalue_
        self.categoriaCnh = categoriaCnh
        self.validate_categoriaCnhType(self.categoriaCnh)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TCnh)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TCnh.subclass:
            return TCnh.subclass(*args_, **kwargs_)
        else:
            return TCnh(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nrRegCnh(self): return self.nrRegCnh
    def set_nrRegCnh(self, nrRegCnh): self.nrRegCnh = nrRegCnh
    def get_dtExped(self): return self.dtExped
    def set_dtExped(self, dtExped): self.dtExped = dtExped
    def get_ufCnh(self): return self.ufCnh
    def set_ufCnh(self, ufCnh): self.ufCnh = ufCnh
    def get_dtValid(self): return self.dtValid
    def set_dtValid(self, dtValid): self.dtValid = dtValid
    def get_dtPriHab(self): return self.dtPriHab
    def set_dtPriHab(self, dtPriHab): self.dtPriHab = dtPriHab
    def get_categoriaCnh(self): return self.categoriaCnh
    def set_categoriaCnh(self, categoriaCnh): self.categoriaCnh = categoriaCnh
    def validate_nrRegCnhType(self, value):
        # Validate type nrRegCnhType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrRegCnhType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrRegCnhType' % {"value" : value.encode("utf-8")} )
    def validate_dtExpedType7(self, value):
        # Validate type dtExpedType7, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_ufCnhType(self, value):
        # Validate type ufCnhType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ufCnhType' % {"value" : value.encode("utf-8")} )
    def validate_dtValidType8(self, value):
        # Validate type dtValidType8, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_dtPriHabType(self, value):
        # Validate type dtPriHabType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_categoriaCnhType(self, value):
        # Validate type categoriaCnhType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_categoriaCnhType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_categoriaCnhType_patterns_, ))
    validate_categoriaCnhType_patterns_ = [['^\\w{1,2}$']]
    def hasContent_(self):
        if (
            self.nrRegCnh is not None or
            self.dtExped is not None or
            self.ufCnh is not None or
            self.dtValid is not None or
            self.dtPriHab is not None or
            self.categoriaCnh is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TCnh', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TCnh')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TCnh')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TCnh', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TCnh'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TCnh', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nrRegCnh is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrRegCnh>%s</nrRegCnh>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrRegCnh), input_name='nrRegCnh')), eol_))
        if self.dtExped is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtExped>%s</dtExped>%s' % (self.gds_format_date(self.dtExped, input_name='dtExped'), eol_))
        if self.ufCnh is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ufCnh>%s</ufCnh>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.ufCnh), input_name='ufCnh')), eol_))
        if self.dtValid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtValid>%s</dtValid>%s' % (self.gds_format_date(self.dtValid, input_name='dtValid'), eol_))
        if self.dtPriHab is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtPriHab>%s</dtPriHab>%s' % (self.gds_format_date(self.dtPriHab, input_name='dtPriHab'), eol_))
        if self.categoriaCnh is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<categoriaCnh>%s</categoriaCnh>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.categoriaCnh), input_name='categoriaCnh')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nrRegCnh':
            nrRegCnh_ = child_.text
            nrRegCnh_ = self.gds_validate_string(nrRegCnh_, node, 'nrRegCnh')
            self.nrRegCnh = nrRegCnh_
            # validate type nrRegCnhType
            self.validate_nrRegCnhType(self.nrRegCnh)
        elif nodeName_ == 'dtExped':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtExped = dval_
            # validate type dtExpedType7
            self.validate_dtExpedType7(self.dtExped)
        elif nodeName_ == 'ufCnh':
            ufCnh_ = child_.text
            ufCnh_ = self.gds_validate_string(ufCnh_, node, 'ufCnh')
            self.ufCnh = ufCnh_
            # validate type ufCnhType
            self.validate_ufCnhType(self.ufCnh)
        elif nodeName_ == 'dtValid':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtValid = dval_
            # validate type dtValidType8
            self.validate_dtValidType8(self.dtValid)
        elif nodeName_ == 'dtPriHab':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtPriHab = dval_
            # validate type dtPriHabType
            self.validate_dtPriHabType(self.dtPriHab)
        elif nodeName_ == 'categoriaCnh':
            categoriaCnh_ = child_.text
            categoriaCnh_ = self.gds_validate_string(categoriaCnh_, node, 'categoriaCnh')
            self.categoriaCnh = categoriaCnh_
            # validate type categoriaCnhType
            self.validate_categoriaCnhType(self.categoriaCnh)
# end class TCnh


class TEnderecoBrasil(GeneratedsSuper):
    """Informações do Endereço no Brasil"""
    subclass = None
    superclass = None
    def __init__(self, tpLograd=None, dscLograd=None, nrLograd=None, complemento=None, bairro=None, cep=None, codMunic=None, uf=None):
        self.original_tagname_ = None
        self.tpLograd = tpLograd
        self.validate_tpLogradType(self.tpLograd)
        self.dscLograd = dscLograd
        self.validate_dscLogradType(self.dscLograd)
        self.nrLograd = nrLograd
        self.validate_nrLogradType(self.nrLograd)
        self.complemento = complemento
        self.validate_complementoType(self.complemento)
        self.bairro = bairro
        self.validate_bairroType(self.bairro)
        self.cep = cep
        self.validate_cepType(self.cep)
        self.codMunic = codMunic
        self.validate_codMunicType9(self.codMunic)
        self.uf = uf
        self.validate_ufType10(self.uf)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TEnderecoBrasil)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TEnderecoBrasil.subclass:
            return TEnderecoBrasil.subclass(*args_, **kwargs_)
        else:
            return TEnderecoBrasil(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tpLograd(self): return self.tpLograd
    def set_tpLograd(self, tpLograd): self.tpLograd = tpLograd
    def get_dscLograd(self): return self.dscLograd
    def set_dscLograd(self, dscLograd): self.dscLograd = dscLograd
    def get_nrLograd(self): return self.nrLograd
    def set_nrLograd(self, nrLograd): self.nrLograd = nrLograd
    def get_complemento(self): return self.complemento
    def set_complemento(self, complemento): self.complemento = complemento
    def get_bairro(self): return self.bairro
    def set_bairro(self, bairro): self.bairro = bairro
    def get_cep(self): return self.cep
    def set_cep(self, cep): self.cep = cep
    def get_codMunic(self): return self.codMunic
    def set_codMunic(self, codMunic): self.codMunic = codMunic
    def get_uf(self): return self.uf
    def set_uf(self, uf): self.uf = uf
    def validate_tpLogradType(self, value):
        # Validate type tpLogradType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tpLogradType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tpLogradType' % {"value" : value.encode("utf-8")} )
    def validate_dscLogradType(self, value):
        # Validate type dscLogradType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 100:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dscLogradType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on dscLogradType' % {"value" : value.encode("utf-8")} )
    def validate_nrLogradType(self, value):
        # Validate type nrLogradType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrLogradType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrLogradType' % {"value" : value.encode("utf-8")} )
    def validate_complementoType(self, value):
        # Validate type complementoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on complementoType' % {"value" : value.encode("utf-8")} )
    def validate_bairroType(self, value):
        # Validate type bairroType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 90:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on bairroType' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on bairroType' % {"value" : value.encode("utf-8")} )
    def validate_cepType(self, value):
        # Validate type cepType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_cepType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_cepType_patterns_, ))
    validate_cepType_patterns_ = [['^\\d{8}$']]
    def validate_codMunicType9(self, value):
        # Validate type codMunicType9, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_ufType10(self, value):
        # Validate type ufType10, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ufType10' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.tpLograd is not None or
            self.dscLograd is not None or
            self.nrLograd is not None or
            self.complemento is not None or
            self.bairro is not None or
            self.cep is not None or
            self.codMunic is not None or
            self.uf is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TEnderecoBrasil', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TEnderecoBrasil')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TEnderecoBrasil')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TEnderecoBrasil', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TEnderecoBrasil'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TEnderecoBrasil', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tpLograd>%s</tpLograd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tpLograd), input_name='tpLograd')), eol_))
        if self.dscLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dscLograd>%s</dscLograd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.dscLograd), input_name='dscLograd')), eol_))
        if self.nrLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrLograd>%s</nrLograd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrLograd), input_name='nrLograd')), eol_))
        if self.complemento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<complemento>%s</complemento>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.complemento), input_name='complemento')), eol_))
        if self.bairro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<bairro>%s</bairro>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.bairro), input_name='bairro')), eol_))
        if self.cep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cep>%s</cep>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cep), input_name='cep')), eol_))
        if self.codMunic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<codMunic>%s</codMunic>%s' % (self.gds_format_integer(self.codMunic, input_name='codMunic'), eol_))
        if self.uf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<uf>%s</uf>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.uf), input_name='uf')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpLograd':
            tpLograd_ = child_.text
            tpLograd_ = self.gds_validate_string(tpLograd_, node, 'tpLograd')
            self.tpLograd = tpLograd_
            # validate type tpLogradType
            self.validate_tpLogradType(self.tpLograd)
        elif nodeName_ == 'dscLograd':
            dscLograd_ = child_.text
            dscLograd_ = self.gds_validate_string(dscLograd_, node, 'dscLograd')
            self.dscLograd = dscLograd_
            # validate type dscLogradType
            self.validate_dscLogradType(self.dscLograd)
        elif nodeName_ == 'nrLograd':
            nrLograd_ = child_.text
            nrLograd_ = self.gds_validate_string(nrLograd_, node, 'nrLograd')
            self.nrLograd = nrLograd_
            # validate type nrLogradType
            self.validate_nrLogradType(self.nrLograd)
        elif nodeName_ == 'complemento':
            complemento_ = child_.text
            complemento_ = self.gds_validate_string(complemento_, node, 'complemento')
            self.complemento = complemento_
            # validate type complementoType
            self.validate_complementoType(self.complemento)
        elif nodeName_ == 'bairro':
            bairro_ = child_.text
            bairro_ = self.gds_validate_string(bairro_, node, 'bairro')
            self.bairro = bairro_
            # validate type bairroType
            self.validate_bairroType(self.bairro)
        elif nodeName_ == 'cep':
            cep_ = child_.text
            cep_ = self.gds_validate_string(cep_, node, 'cep')
            self.cep = cep_
            # validate type cepType
            self.validate_cepType(self.cep)
        elif nodeName_ == 'codMunic' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'codMunic')
            self.codMunic = ival_
            # validate type codMunicType9
            self.validate_codMunicType9(self.codMunic)
        elif nodeName_ == 'uf':
            uf_ = child_.text
            uf_ = self.gds_validate_string(uf_, node, 'uf')
            self.uf = uf_
            # validate type ufType10
            self.validate_ufType10(self.uf)
# end class TEnderecoBrasil


class TEnderecoExterior(GeneratedsSuper):
    """Informações do Endereço no Exterior"""
    subclass = None
    superclass = None
    def __init__(self, paisResid=None, dscLograd=None, nrLograd=None, complemento=None, bairro=None, nmCid=None, codPostal=None):
        self.original_tagname_ = None
        self.paisResid = paisResid
        self.validate_paisResidType(self.paisResid)
        self.dscLograd = dscLograd
        self.validate_dscLogradType11(self.dscLograd)
        self.nrLograd = nrLograd
        self.validate_nrLogradType12(self.nrLograd)
        self.complemento = complemento
        self.validate_complementoType13(self.complemento)
        self.bairro = bairro
        self.validate_bairroType14(self.bairro)
        self.nmCid = nmCid
        self.validate_nmCidType(self.nmCid)
        self.codPostal = codPostal
        self.validate_codPostalType(self.codPostal)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TEnderecoExterior)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TEnderecoExterior.subclass:
            return TEnderecoExterior.subclass(*args_, **kwargs_)
        else:
            return TEnderecoExterior(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_paisResid(self): return self.paisResid
    def set_paisResid(self, paisResid): self.paisResid = paisResid
    def get_dscLograd(self): return self.dscLograd
    def set_dscLograd(self, dscLograd): self.dscLograd = dscLograd
    def get_nrLograd(self): return self.nrLograd
    def set_nrLograd(self, nrLograd): self.nrLograd = nrLograd
    def get_complemento(self): return self.complemento
    def set_complemento(self, complemento): self.complemento = complemento
    def get_bairro(self): return self.bairro
    def set_bairro(self, bairro): self.bairro = bairro
    def get_nmCid(self): return self.nmCid
    def set_nmCid(self, nmCid): self.nmCid = nmCid
    def get_codPostal(self): return self.codPostal
    def set_codPostal(self, codPostal): self.codPostal = codPostal
    def validate_paisResidType(self, value):
        # Validate type paisResidType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on paisResidType' % {"value" : value.encode("utf-8")} )
    def validate_dscLogradType11(self, value):
        # Validate type dscLogradType11, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 100:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on dscLogradType11' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on dscLogradType11' % {"value" : value.encode("utf-8")} )
    def validate_nrLogradType12(self, value):
        # Validate type nrLogradType12, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nrLogradType12' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nrLogradType12' % {"value" : value.encode("utf-8")} )
    def validate_complementoType13(self, value):
        # Validate type complementoType13, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 30:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on complementoType13' % {"value" : value.encode("utf-8")} )
    def validate_bairroType14(self, value):
        # Validate type bairroType14, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 90:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on bairroType14' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on bairroType14' % {"value" : value.encode("utf-8")} )
    def validate_nmCidType(self, value):
        # Validate type nmCidType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nmCidType' % {"value" : value.encode("utf-8")} )
    def validate_codPostalType(self, value):
        # Validate type codPostalType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 12:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on codPostalType' % {"value" : value.encode("utf-8")} )
            if len(value) < 4:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on codPostalType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.paisResid is not None or
            self.dscLograd is not None or
            self.nrLograd is not None or
            self.complemento is not None or
            self.bairro is not None or
            self.nmCid is not None or
            self.codPostal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TEnderecoExterior', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TEnderecoExterior')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TEnderecoExterior')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TEnderecoExterior', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TEnderecoExterior'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TEnderecoExterior', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.paisResid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<paisResid>%s</paisResid>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.paisResid), input_name='paisResid')), eol_))
        if self.dscLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dscLograd>%s</dscLograd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.dscLograd), input_name='dscLograd')), eol_))
        if self.nrLograd is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nrLograd>%s</nrLograd>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nrLograd), input_name='nrLograd')), eol_))
        if self.complemento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<complemento>%s</complemento>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.complemento), input_name='complemento')), eol_))
        if self.bairro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<bairro>%s</bairro>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.bairro), input_name='bairro')), eol_))
        if self.nmCid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nmCid>%s</nmCid>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nmCid), input_name='nmCid')), eol_))
        if self.codPostal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<codPostal>%s</codPostal>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.codPostal), input_name='codPostal')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'paisResid':
            paisResid_ = child_.text
            paisResid_ = self.gds_validate_string(paisResid_, node, 'paisResid')
            self.paisResid = paisResid_
            # validate type paisResidType
            self.validate_paisResidType(self.paisResid)
        elif nodeName_ == 'dscLograd':
            dscLograd_ = child_.text
            dscLograd_ = self.gds_validate_string(dscLograd_, node, 'dscLograd')
            self.dscLograd = dscLograd_
            # validate type dscLogradType11
            self.validate_dscLogradType11(self.dscLograd)
        elif nodeName_ == 'nrLograd':
            nrLograd_ = child_.text
            nrLograd_ = self.gds_validate_string(nrLograd_, node, 'nrLograd')
            self.nrLograd = nrLograd_
            # validate type nrLogradType12
            self.validate_nrLogradType12(self.nrLograd)
        elif nodeName_ == 'complemento':
            complemento_ = child_.text
            complemento_ = self.gds_validate_string(complemento_, node, 'complemento')
            self.complemento = complemento_
            # validate type complementoType13
            self.validate_complementoType13(self.complemento)
        elif nodeName_ == 'bairro':
            bairro_ = child_.text
            bairro_ = self.gds_validate_string(bairro_, node, 'bairro')
            self.bairro = bairro_
            # validate type bairroType14
            self.validate_bairroType14(self.bairro)
        elif nodeName_ == 'nmCid':
            nmCid_ = child_.text
            nmCid_ = self.gds_validate_string(nmCid_, node, 'nmCid')
            self.nmCid = nmCid_
            # validate type nmCidType
            self.validate_nmCidType(self.nmCid)
        elif nodeName_ == 'codPostal':
            codPostal_ = child_.text
            codPostal_ = self.gds_validate_string(codPostal_, node, 'codPostal')
            self.codPostal = codPostal_
            # validate type codPostalType
            self.validate_codPostalType(self.codPostal)
# end class TEnderecoExterior


class TTrabEstrang(GeneratedsSuper):
    """Informações do Trabalhador Estrangeiro"""
    subclass = None
    superclass = None
    def __init__(self, dtChegada=None, classTrabEstrang=None, casadoBr=None, filhosBr=None):
        self.original_tagname_ = None
        if isinstance(dtChegada, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtChegada, '%Y-%m-%d').date()
        else:
            initvalue_ = dtChegada
        self.dtChegada = initvalue_
        self.classTrabEstrang = classTrabEstrang
        self.validate_classTrabEstrangType(self.classTrabEstrang)
        self.casadoBr = casadoBr
        self.validate_casadoBrType(self.casadoBr)
        self.filhosBr = filhosBr
        self.validate_filhosBrType(self.filhosBr)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TTrabEstrang)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TTrabEstrang.subclass:
            return TTrabEstrang.subclass(*args_, **kwargs_)
        else:
            return TTrabEstrang(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dtChegada(self): return self.dtChegada
    def set_dtChegada(self, dtChegada): self.dtChegada = dtChegada
    def get_classTrabEstrang(self): return self.classTrabEstrang
    def set_classTrabEstrang(self, classTrabEstrang): self.classTrabEstrang = classTrabEstrang
    def get_casadoBr(self): return self.casadoBr
    def set_casadoBr(self, casadoBr): self.casadoBr = casadoBr
    def get_filhosBr(self): return self.filhosBr
    def set_filhosBr(self, filhosBr): self.filhosBr = filhosBr
    def validate_dtChegadaType(self, value):
        # Validate type dtChegadaType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_classTrabEstrangType(self, value):
        # Validate type classTrabEstrangType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_classTrabEstrangType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_classTrabEstrangType_patterns_, ))
    validate_classTrabEstrangType_patterns_ = [['^\\d{1,2}$']]
    def validate_casadoBrType(self, value):
        # Validate type casadoBrType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on casadoBrType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_casadoBrType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_casadoBrType_patterns_, ))
    validate_casadoBrType_patterns_ = [['^[N|S]$']]
    def validate_filhosBrType(self, value):
        # Validate type filhosBrType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on filhosBrType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_filhosBrType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_filhosBrType_patterns_, ))
    validate_filhosBrType_patterns_ = [['^[N|S]$']]
    def hasContent_(self):
        if (
            self.dtChegada is not None or
            self.classTrabEstrang is not None or
            self.casadoBr is not None or
            self.filhosBr is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TTrabEstrang', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TTrabEstrang')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TTrabEstrang')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TTrabEstrang', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TTrabEstrang'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TTrabEstrang', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dtChegada is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtChegada>%s</dtChegada>%s' % (self.gds_format_date(self.dtChegada, input_name='dtChegada'), eol_))
        if self.classTrabEstrang is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<classTrabEstrang>%s</classTrabEstrang>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.classTrabEstrang), input_name='classTrabEstrang')), eol_))
        if self.casadoBr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<casadoBr>%s</casadoBr>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.casadoBr), input_name='casadoBr')), eol_))
        if self.filhosBr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<filhosBr>%s</filhosBr>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.filhosBr), input_name='filhosBr')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dtChegada':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtChegada = dval_
            # validate type dtChegadaType
            self.validate_dtChegadaType(self.dtChegada)
        elif nodeName_ == 'classTrabEstrang':
            classTrabEstrang_ = child_.text
            classTrabEstrang_ = self.gds_validate_string(classTrabEstrang_, node, 'classTrabEstrang')
            self.classTrabEstrang = classTrabEstrang_
            # validate type classTrabEstrangType
            self.validate_classTrabEstrangType(self.classTrabEstrang)
        elif nodeName_ == 'casadoBr':
            casadoBr_ = child_.text
            casadoBr_ = self.gds_validate_string(casadoBr_, node, 'casadoBr')
            self.casadoBr = casadoBr_
            # validate type casadoBrType
            self.validate_casadoBrType(self.casadoBr)
        elif nodeName_ == 'filhosBr':
            filhosBr_ = child_.text
            filhosBr_ = self.gds_validate_string(filhosBr_, node, 'filhosBr')
            self.filhosBr = filhosBr_
            # validate type filhosBrType
            self.validate_filhosBrType(self.filhosBr)
# end class TTrabEstrang


class TDependente(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tpDep=None, nmDep=None, dtNascto=None, cpfDep=None, depIRRF=None, depSF=None, incTrab=None):
        self.original_tagname_ = None
        self.tpDep = tpDep
        self.validate_tpDepType(self.tpDep)
        self.nmDep = nmDep
        self.validate_nmDepType(self.nmDep)
        if isinstance(dtNascto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtNascto, '%Y-%m-%d').date()
        else:
            initvalue_ = dtNascto
        self.dtNascto = initvalue_
        self.cpfDep = cpfDep
        self.validate_cpfDepType(self.cpfDep)
        self.depIRRF = depIRRF
        self.validate_depIRRFType(self.depIRRF)
        self.depSF = depSF
        self.validate_depSFType(self.depSF)
        self.incTrab = incTrab
        self.validate_incTrabType(self.incTrab)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TDependente)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TDependente.subclass:
            return TDependente.subclass(*args_, **kwargs_)
        else:
            return TDependente(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_tpDep(self): return self.tpDep
    def set_tpDep(self, tpDep): self.tpDep = tpDep
    def get_nmDep(self): return self.nmDep
    def set_nmDep(self, nmDep): self.nmDep = nmDep
    def get_dtNascto(self): return self.dtNascto
    def set_dtNascto(self, dtNascto): self.dtNascto = dtNascto
    def get_cpfDep(self): return self.cpfDep
    def set_cpfDep(self, cpfDep): self.cpfDep = cpfDep
    def get_depIRRF(self): return self.depIRRF
    def set_depIRRF(self, depIRRF): self.depIRRF = depIRRF
    def get_depSF(self): return self.depSF
    def set_depSF(self, depSF): self.depSF = depSF
    def get_incTrab(self): return self.incTrab
    def set_incTrab(self, incTrab): self.incTrab = incTrab
    def validate_tpDepType(self, value):
        # Validate type tpDepType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tpDepType' % {"value" : value.encode("utf-8")} )
    def validate_nmDepType(self, value):
        # Validate type nmDepType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nmDepType' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nmDepType' % {"value" : value.encode("utf-8")} )
    def validate_dtNasctoType15(self, value):
        # Validate type dtNasctoType15, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_cpfDepType(self, value):
        # Validate type cpfDepType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_cpfDepType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_cpfDepType_patterns_, ))
    validate_cpfDepType_patterns_ = [['^\\d{11}$']]
    def validate_depIRRFType(self, value):
        # Validate type depIRRFType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on depIRRFType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_depIRRFType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_depIRRFType_patterns_, ))
    validate_depIRRFType_patterns_ = [['^[N|S]$']]
    def validate_depSFType(self, value):
        # Validate type depSFType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on depSFType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_depSFType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_depSFType_patterns_, ))
    validate_depSFType_patterns_ = [['^[N|S]$']]
    def validate_incTrabType(self, value):
        # Validate type incTrabType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_incTrabType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_incTrabType_patterns_, ))
    validate_incTrabType_patterns_ = [['^[N|S]$']]
    def hasContent_(self):
        if (
            self.tpDep is not None or
            self.nmDep is not None or
            self.dtNascto is not None or
            self.cpfDep is not None or
            self.depIRRF is not None or
            self.depSF is not None or
            self.incTrab is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TDependente', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TDependente')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TDependente')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TDependente', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TDependente'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TDependente', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.tpDep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<tpDep>%s</tpDep>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.tpDep), input_name='tpDep')), eol_))
        if self.nmDep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nmDep>%s</nmDep>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nmDep), input_name='nmDep')), eol_))
        if self.dtNascto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtNascto>%s</dtNascto>%s' % (self.gds_format_date(self.dtNascto, input_name='dtNascto'), eol_))
        if self.cpfDep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cpfDep>%s</cpfDep>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cpfDep), input_name='cpfDep')), eol_))
        if self.depIRRF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<depIRRF>%s</depIRRF>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.depIRRF), input_name='depIRRF')), eol_))
        if self.depSF is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<depSF>%s</depSF>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.depSF), input_name='depSF')), eol_))
        if self.incTrab is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<incTrab>%s</incTrab>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.incTrab), input_name='incTrab')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tpDep':
            tpDep_ = child_.text
            tpDep_ = self.gds_validate_string(tpDep_, node, 'tpDep')
            self.tpDep = tpDep_
            # validate type tpDepType
            self.validate_tpDepType(self.tpDep)
        elif nodeName_ == 'nmDep':
            nmDep_ = child_.text
            nmDep_ = self.gds_validate_string(nmDep_, node, 'nmDep')
            self.nmDep = nmDep_
            # validate type nmDepType
            self.validate_nmDepType(self.nmDep)
        elif nodeName_ == 'dtNascto':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtNascto = dval_
            # validate type dtNasctoType15
            self.validate_dtNasctoType15(self.dtNascto)
        elif nodeName_ == 'cpfDep':
            cpfDep_ = child_.text
            cpfDep_ = self.gds_validate_string(cpfDep_, node, 'cpfDep')
            self.cpfDep = cpfDep_
            # validate type cpfDepType
            self.validate_cpfDepType(self.cpfDep)
        elif nodeName_ == 'depIRRF':
            depIRRF_ = child_.text
            depIRRF_ = self.gds_validate_string(depIRRF_, node, 'depIRRF')
            self.depIRRF = depIRRF_
            # validate type depIRRFType
            self.validate_depIRRFType(self.depIRRF)
        elif nodeName_ == 'depSF':
            depSF_ = child_.text
            depSF_ = self.gds_validate_string(depSF_, node, 'depSF')
            self.depSF = depSF_
            # validate type depSFType
            self.validate_depSFType(self.depSF)
        elif nodeName_ == 'incTrab':
            incTrab_ = child_.text
            incTrab_ = self.gds_validate_string(incTrab_, node, 'incTrab')
            self.incTrab = incTrab_
            # validate type incTrabType
            self.validate_incTrabType(self.incTrab)
# end class TDependente


class TContato(GeneratedsSuper):
    """Informações de Contato"""
    subclass = None
    superclass = None
    def __init__(self, fonePrinc=None, foneAlternat=None, emailPrinc=None, emailAlternat=None):
        self.original_tagname_ = None
        self.fonePrinc = fonePrinc
        self.validate_fonePrincType(self.fonePrinc)
        self.foneAlternat = foneAlternat
        self.validate_foneAlternatType(self.foneAlternat)
        self.emailPrinc = emailPrinc
        self.validate_emailPrincType(self.emailPrinc)
        self.emailAlternat = emailAlternat
        self.validate_emailAlternatType(self.emailAlternat)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TContato)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TContato.subclass:
            return TContato.subclass(*args_, **kwargs_)
        else:
            return TContato(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_fonePrinc(self): return self.fonePrinc
    def set_fonePrinc(self, fonePrinc): self.fonePrinc = fonePrinc
    def get_foneAlternat(self): return self.foneAlternat
    def set_foneAlternat(self, foneAlternat): self.foneAlternat = foneAlternat
    def get_emailPrinc(self): return self.emailPrinc
    def set_emailPrinc(self, emailPrinc): self.emailPrinc = emailPrinc
    def get_emailAlternat(self): return self.emailAlternat
    def set_emailAlternat(self, emailAlternat): self.emailAlternat = emailAlternat
    def validate_fonePrincType(self, value):
        # Validate type fonePrincType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 13:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on fonePrincType' % {"value" : value.encode("utf-8")} )
            if len(value) < 8:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on fonePrincType' % {"value" : value.encode("utf-8")} )
    def validate_foneAlternatType(self, value):
        # Validate type foneAlternatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 13:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on foneAlternatType' % {"value" : value.encode("utf-8")} )
            if len(value) < 8:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on foneAlternatType' % {"value" : value.encode("utf-8")} )
    def validate_emailPrincType(self, value):
        # Validate type emailPrincType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on emailPrincType' % {"value" : value.encode("utf-8")} )
            if len(value) < 6:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on emailPrincType' % {"value" : value.encode("utf-8")} )
    def validate_emailAlternatType(self, value):
        # Validate type emailAlternatType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on emailAlternatType' % {"value" : value.encode("utf-8")} )
            if len(value) < 6:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on emailAlternatType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.fonePrinc is not None or
            self.foneAlternat is not None or
            self.emailPrinc is not None or
            self.emailAlternat is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='TContato', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TContato')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TContato')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='TContato', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='TContato'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='TContato', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.fonePrinc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<fonePrinc>%s</fonePrinc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.fonePrinc), input_name='fonePrinc')), eol_))
        if self.foneAlternat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<foneAlternat>%s</foneAlternat>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.foneAlternat), input_name='foneAlternat')), eol_))
        if self.emailPrinc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<emailPrinc>%s</emailPrinc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.emailPrinc), input_name='emailPrinc')), eol_))
        if self.emailAlternat is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<emailAlternat>%s</emailAlternat>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.emailAlternat), input_name='emailAlternat')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'fonePrinc':
            fonePrinc_ = child_.text
            fonePrinc_ = self.gds_validate_string(fonePrinc_, node, 'fonePrinc')
            self.fonePrinc = fonePrinc_
            # validate type fonePrincType
            self.validate_fonePrincType(self.fonePrinc)
        elif nodeName_ == 'foneAlternat':
            foneAlternat_ = child_.text
            foneAlternat_ = self.gds_validate_string(foneAlternat_, node, 'foneAlternat')
            self.foneAlternat = foneAlternat_
            # validate type foneAlternatType
            self.validate_foneAlternatType(self.foneAlternat)
        elif nodeName_ == 'emailPrinc':
            emailPrinc_ = child_.text
            emailPrinc_ = self.gds_validate_string(emailPrinc_, node, 'emailPrinc')
            self.emailPrinc = emailPrinc_
            # validate type emailPrincType
            self.validate_emailPrincType(self.emailPrinc)
        elif nodeName_ == 'emailAlternat':
            emailAlternat_ = child_.text
            emailAlternat_ = self.gds_validate_string(emailAlternat_, node, 'emailAlternat')
            self.emailAlternat = emailAlternat_
            # validate type emailAlternatType
            self.validate_emailAlternatType(self.emailAlternat)
# end class TContato


class SignatureType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignedInfo=None, SignatureValue=None, KeyInfo=None, Object=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.SignedInfo = SignedInfo
        self.SignatureValue = SignatureValue
        self.KeyInfo = KeyInfo
        if Object is None:
            self.Object = []
        else:
            self.Object = Object
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureType.subclass:
            return SignatureType.subclass(*args_, **kwargs_)
        else:
            return SignatureType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignedInfo(self): return self.SignedInfo
    def set_SignedInfo(self, SignedInfo): self.SignedInfo = SignedInfo
    def get_SignatureValue(self): return self.SignatureValue
    def set_SignatureValue(self, SignatureValue): self.SignatureValue = SignatureValue
    def get_KeyInfo(self): return self.KeyInfo
    def set_KeyInfo(self, KeyInfo): self.KeyInfo = KeyInfo
    def get_Object(self): return self.Object
    def set_Object(self, Object): self.Object = Object
    def add_Object(self, value): self.Object.append(value)
    def insert_Object_at(self, index, value): self.Object.insert(index, value)
    def replace_Object_at(self, index, value): self.Object[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignedInfo is not None or
            self.SignatureValue is not None or
            self.KeyInfo is not None or
            self.Object
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SignatureType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SignatureType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SignatureType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SignedInfo is not None:
            self.SignedInfo.export(outfile, level, namespaceprefix_='ds:', name_='SignedInfo', pretty_print=pretty_print)
        if self.SignatureValue is not None:
            self.SignatureValue.export(outfile, level, namespaceprefix_='ds:', name_='SignatureValue', pretty_print=pretty_print)
        if self.KeyInfo is not None:
            self.KeyInfo.export(outfile, level, namespaceprefix_='ds:', name_='KeyInfo', pretty_print=pretty_print)
        for Object_ in self.Object:
            Object_.export(outfile, level, namespaceprefix_='ds:', name_='Object', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignedInfo':
            obj_ = SignedInfoType.factory()
            obj_.build(child_)
            self.SignedInfo = obj_
            obj_.original_tagname_ = 'SignedInfo'
        elif nodeName_ == 'SignatureValue':
            obj_ = SignatureValueType.factory()
            obj_.build(child_)
            self.SignatureValue = obj_
            obj_.original_tagname_ = 'SignatureValue'
        elif nodeName_ == 'KeyInfo':
            obj_ = KeyInfoType.factory()
            obj_.build(child_)
            self.KeyInfo = obj_
            obj_.original_tagname_ = 'KeyInfo'
        elif nodeName_ == 'Object':
            obj_ = ObjectType.factory()
            obj_.build(child_)
            self.Object.append(obj_)
            obj_.original_tagname_ = 'Object'
# end class SignatureType


class SignatureValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, valueOf_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureValueType.subclass:
            return SignatureValueType.subclass(*args_, **kwargs_)
        else:
            return SignatureValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SignatureValueType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureValueType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SignatureValueType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureValueType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SignatureValueType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SignatureValueType


class SignedInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, CanonicalizationMethod=None, SignatureMethod=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.CanonicalizationMethod = CanonicalizationMethod
        self.SignatureMethod = SignatureMethod
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignedInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignedInfoType.subclass:
            return SignedInfoType.subclass(*args_, **kwargs_)
        else:
            return SignedInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CanonicalizationMethod(self): return self.CanonicalizationMethod
    def set_CanonicalizationMethod(self, CanonicalizationMethod): self.CanonicalizationMethod = CanonicalizationMethod
    def get_SignatureMethod(self): return self.SignatureMethod
    def set_SignatureMethod(self, SignatureMethod): self.SignatureMethod = SignatureMethod
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.CanonicalizationMethod is not None or
            self.SignatureMethod is not None or
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SignedInfoType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignedInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignedInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SignedInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignedInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SignedInfoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CanonicalizationMethod is not None:
            self.CanonicalizationMethod.export(outfile, level, namespaceprefix_='ds:', name_='CanonicalizationMethod', pretty_print=pretty_print)
        if self.SignatureMethod is not None:
            self.SignatureMethod.export(outfile, level, namespaceprefix_='ds:', name_='SignatureMethod', pretty_print=pretty_print)
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespaceprefix_='ds:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CanonicalizationMethod':
            obj_ = CanonicalizationMethodType.factory()
            obj_.build(child_)
            self.CanonicalizationMethod = obj_
            obj_.original_tagname_ = 'CanonicalizationMethod'
        elif nodeName_ == 'SignatureMethod':
            obj_ = SignatureMethodType.factory()
            obj_.build(child_)
            self.SignatureMethod = obj_
            obj_.original_tagname_ = 'SignatureMethod'
        elif nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class SignedInfoType


class CanonicalizationMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CanonicalizationMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CanonicalizationMethodType.subclass:
            return CanonicalizationMethodType.subclass(*args_, **kwargs_)
        else:
            return CanonicalizationMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='CanonicalizationMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CanonicalizationMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CanonicalizationMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='CanonicalizationMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='CanonicalizationMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='CanonicalizationMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class CanonicalizationMethodType


class SignatureMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, HMACOutputLength=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.HMACOutputLength = HMACOutputLength
        self.validate_HMACOutputLengthType(self.HMACOutputLength)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignatureMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignatureMethodType.subclass:
            return SignatureMethodType.subclass(*args_, **kwargs_)
        else:
            return SignatureMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_HMACOutputLength(self): return self.HMACOutputLength
    def set_HMACOutputLength(self, HMACOutputLength): self.HMACOutputLength = HMACOutputLength
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def validate_HMACOutputLengthType(self, value):
        # Validate type HMACOutputLengthType, a restriction on integer.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.HMACOutputLength is not None or
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SignatureMethodType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignatureMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignatureMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SignatureMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignatureMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SignatureMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.HMACOutputLength is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:HMACOutputLength>%s</ds:HMACOutputLength>%s' % (self.gds_format_integer(self.HMACOutputLength, input_name='HMACOutputLength'), eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'HMACOutputLength' and child_.text is not None:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeInteger, 'HMACOutputLength', ival_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignatureMethodType


class ReferenceType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, URI=None, Type=None, Transforms=None, DigestMethod=None, DigestValue=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
        self.DigestMethod = DigestMethod
        self.DigestValue = DigestValue
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ReferenceType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ReferenceType.subclass:
            return ReferenceType.subclass(*args_, **kwargs_)
        else:
            return ReferenceType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_DigestMethod(self): return self.DigestMethod
    def set_DigestMethod(self, DigestMethod): self.DigestMethod = DigestMethod
    def get_DigestValue(self): return self.DigestValue
    def set_DigestValue(self, DigestValue): self.DigestValue = DigestValue
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Transforms is not None or
            self.DigestMethod is not None or
            self.DigestValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='ReferenceType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ReferenceType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ReferenceType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='ReferenceType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ReferenceType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='ReferenceType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespaceprefix_='ds:', name_='Transforms', pretty_print=pretty_print)
        if self.DigestMethod is not None:
            self.DigestMethod.export(outfile, level, namespaceprefix_='ds:', name_='DigestMethod', pretty_print=pretty_print)
        if self.DigestValue is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:DigestValue>%s</ds:DigestValue>%s' % (self.gds_format_base64(self.DigestValue, input_name='DigestValue'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
        elif nodeName_ == 'DigestMethod':
            obj_ = DigestMethodType.factory()
            obj_.build(child_)
            self.DigestMethod = obj_
            obj_.original_tagname_ = 'DigestMethod'
        elif nodeName_ == 'DigestValue':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'DigestValue')
            else:
                bval_ = None
            self.DigestValue = bval_
# end class ReferenceType


class TransformsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Transform=None):
        self.original_tagname_ = None
        if Transform is None:
            self.Transform = []
        else:
            self.Transform = Transform
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformsType.subclass:
            return TransformsType.subclass(*args_, **kwargs_)
        else:
            return TransformsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transform(self): return self.Transform
    def set_Transform(self, Transform): self.Transform = Transform
    def add_Transform(self, value): self.Transform.append(value)
    def insert_Transform_at(self, index, value): self.Transform.insert(index, value)
    def replace_Transform_at(self, index, value): self.Transform[index] = value
    def hasContent_(self):
        if (
            self.Transform
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='TransformsType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransformsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='TransformsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='TransformsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='TransformsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Transform_ in self.Transform:
            Transform_.export(outfile, level, namespaceprefix_='ds:', name_='Transform', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transform':
            obj_ = TransformType.factory()
            obj_.build(child_)
            self.Transform.append(obj_)
            obj_.original_tagname_ = 'Transform'
# end class TransformsType


class TransformType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, XPath=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        self.anytypeobjs_ = anytypeobjs_
        if XPath is None:
            self.XPath = []
        else:
            self.XPath = XPath
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TransformType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TransformType.subclass:
            return TransformType.subclass(*args_, **kwargs_)
        else:
            return TransformType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_XPath(self): return self.XPath
    def set_XPath(self, XPath): self.XPath = XPath
    def add_XPath(self, value): self.XPath.append(value)
    def insert_XPath_at(self, index, value): self.XPath.insert(index, value)
    def replace_XPath_at(self, index, value): self.XPath[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            self.XPath or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='TransformType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TransformType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='TransformType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='TransformType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='TransformType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='TransformType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for XPath_ in self.XPath:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:XPath>%s</ds:XPath>%s' % (self.gds_encode(self.gds_format_string(quote_xml(XPath_), input_name='XPath')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        elif nodeName_ == 'XPath' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'XPath', valuestr_)
            self.content_.append(obj_)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class TransformType


class DigestMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Algorithm=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Algorithm = _cast(None, Algorithm)
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DigestMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DigestMethodType.subclass:
            return DigestMethodType.subclass(*args_, **kwargs_)
        else:
            return DigestMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def get_Algorithm(self): return self.Algorithm
    def set_Algorithm(self, Algorithm): self.Algorithm = Algorithm
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='DigestMethodType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DigestMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DigestMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='DigestMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='DigestMethodType'):
        if self.Algorithm is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            outfile.write(' Algorithm=%s' % (quote_attrib(self.Algorithm), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='DigestMethodType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Algorithm', node)
        if value is not None and 'Algorithm' not in already_processed:
            already_processed.add('Algorithm')
            self.Algorithm = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class DigestMethodType


class KeyInfoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, KeyName=None, KeyValue=None, RetrievalMethod=None, X509Data=None, PGPData=None, SPKIData=None, MgmtData=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if KeyName is None:
            self.KeyName = []
        else:
            self.KeyName = KeyName
        if KeyValue is None:
            self.KeyValue = []
        else:
            self.KeyValue = KeyValue
        if RetrievalMethod is None:
            self.RetrievalMethod = []
        else:
            self.RetrievalMethod = RetrievalMethod
        if X509Data is None:
            self.X509Data = []
        else:
            self.X509Data = X509Data
        if PGPData is None:
            self.PGPData = []
        else:
            self.PGPData = PGPData
        if SPKIData is None:
            self.SPKIData = []
        else:
            self.SPKIData = SPKIData
        if MgmtData is None:
            self.MgmtData = []
        else:
            self.MgmtData = MgmtData
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyInfoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyInfoType.subclass:
            return KeyInfoType.subclass(*args_, **kwargs_)
        else:
            return KeyInfoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_KeyName(self): return self.KeyName
    def set_KeyName(self, KeyName): self.KeyName = KeyName
    def add_KeyName(self, value): self.KeyName.append(value)
    def insert_KeyName_at(self, index, value): self.KeyName.insert(index, value)
    def replace_KeyName_at(self, index, value): self.KeyName[index] = value
    def get_KeyValue(self): return self.KeyValue
    def set_KeyValue(self, KeyValue): self.KeyValue = KeyValue
    def add_KeyValue(self, value): self.KeyValue.append(value)
    def insert_KeyValue_at(self, index, value): self.KeyValue.insert(index, value)
    def replace_KeyValue_at(self, index, value): self.KeyValue[index] = value
    def get_RetrievalMethod(self): return self.RetrievalMethod
    def set_RetrievalMethod(self, RetrievalMethod): self.RetrievalMethod = RetrievalMethod
    def add_RetrievalMethod(self, value): self.RetrievalMethod.append(value)
    def insert_RetrievalMethod_at(self, index, value): self.RetrievalMethod.insert(index, value)
    def replace_RetrievalMethod_at(self, index, value): self.RetrievalMethod[index] = value
    def get_X509Data(self): return self.X509Data
    def set_X509Data(self, X509Data): self.X509Data = X509Data
    def add_X509Data(self, value): self.X509Data.append(value)
    def insert_X509Data_at(self, index, value): self.X509Data.insert(index, value)
    def replace_X509Data_at(self, index, value): self.X509Data[index] = value
    def get_PGPData(self): return self.PGPData
    def set_PGPData(self, PGPData): self.PGPData = PGPData
    def add_PGPData(self, value): self.PGPData.append(value)
    def insert_PGPData_at(self, index, value): self.PGPData.insert(index, value)
    def replace_PGPData_at(self, index, value): self.PGPData[index] = value
    def get_SPKIData(self): return self.SPKIData
    def set_SPKIData(self, SPKIData): self.SPKIData = SPKIData
    def add_SPKIData(self, value): self.SPKIData.append(value)
    def insert_SPKIData_at(self, index, value): self.SPKIData.insert(index, value)
    def replace_SPKIData_at(self, index, value): self.SPKIData[index] = value
    def get_MgmtData(self): return self.MgmtData
    def set_MgmtData(self, MgmtData): self.MgmtData = MgmtData
    def add_MgmtData(self, value): self.MgmtData.append(value)
    def insert_MgmtData_at(self, index, value): self.MgmtData.insert(index, value)
    def replace_MgmtData_at(self, index, value): self.MgmtData[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.KeyName or
            self.KeyValue or
            self.RetrievalMethod or
            self.X509Data or
            self.PGPData or
            self.SPKIData or
            self.MgmtData or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='KeyInfoType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyInfoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyInfoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='KeyInfoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='KeyInfoType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='KeyInfoType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for KeyName_ in self.KeyName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:KeyName>%s</ds:KeyName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(KeyName_), input_name='KeyName')), eol_))
        for KeyValue_ in self.KeyValue:
            KeyValue_.export(outfile, level, namespaceprefix_='ds:', name_='KeyValue', pretty_print=pretty_print)
        for RetrievalMethod_ in self.RetrievalMethod:
            RetrievalMethod_.export(outfile, level, namespaceprefix_='ds:', name_='RetrievalMethod', pretty_print=pretty_print)
        for X509Data_ in self.X509Data:
            X509Data_.export(outfile, level, namespaceprefix_='ds:', name_='X509Data', pretty_print=pretty_print)
        for PGPData_ in self.PGPData:
            PGPData_.export(outfile, level, namespaceprefix_='ds:', name_='PGPData', pretty_print=pretty_print)
        for SPKIData_ in self.SPKIData:
            SPKIData_.export(outfile, level, namespaceprefix_='ds:', name_='SPKIData', pretty_print=pretty_print)
        for MgmtData_ in self.MgmtData:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:MgmtData>%s</ds:MgmtData>%s' % (self.gds_encode(self.gds_format_string(quote_xml(MgmtData_), input_name='MgmtData')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'KeyName' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'KeyName', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == 'KeyValue':
            obj_ = KeyValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'KeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_KeyValue'):
              self.add_KeyValue(obj_.value)
            elif hasattr(self, 'set_KeyValue'):
              self.set_KeyValue(obj_.value)
        elif nodeName_ == 'RetrievalMethod':
            obj_ = RetrievalMethodType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RetrievalMethod', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RetrievalMethod'):
              self.add_RetrievalMethod(obj_.value)
            elif hasattr(self, 'set_RetrievalMethod'):
              self.set_RetrievalMethod(obj_.value)
        elif nodeName_ == 'X509Data':
            obj_ = X509DataType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'X509Data', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_X509Data'):
              self.add_X509Data(obj_.value)
            elif hasattr(self, 'set_X509Data'):
              self.set_X509Data(obj_.value)
        elif nodeName_ == 'PGPData':
            obj_ = PGPDataType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'PGPData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_PGPData'):
              self.add_PGPData(obj_.value)
            elif hasattr(self, 'set_PGPData'):
              self.set_PGPData(obj_.value)
        elif nodeName_ == 'SPKIData':
            obj_ = SPKIDataType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'SPKIData', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_SPKIData'):
              self.add_SPKIData(obj_.value)
            elif hasattr(self, 'set_SPKIData'):
              self.set_SPKIData(obj_.value)
        elif nodeName_ == 'MgmtData' and child_.text is not None:
            valuestr_ = child_.text
            obj_ = self.mixedclass_(MixedContainer.CategorySimple,
                MixedContainer.TypeString, 'MgmtData', valuestr_)
            self.content_.append(obj_)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyInfoType


class KeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DSAKeyValue=None, RSAKeyValue=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.DSAKeyValue = DSAKeyValue
        self.RSAKeyValue = RSAKeyValue
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, KeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if KeyValueType.subclass:
            return KeyValueType.subclass(*args_, **kwargs_)
        else:
            return KeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DSAKeyValue(self): return self.DSAKeyValue
    def set_DSAKeyValue(self, DSAKeyValue): self.DSAKeyValue = DSAKeyValue
    def get_RSAKeyValue(self): return self.RSAKeyValue
    def set_RSAKeyValue(self, RSAKeyValue): self.RSAKeyValue = RSAKeyValue
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.DSAKeyValue is not None or
            self.RSAKeyValue is not None or
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='KeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('KeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='KeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='KeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='KeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='KeyValueType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DSAKeyValue is not None:
            self.DSAKeyValue.export(outfile, level, namespaceprefix_='ds:', name_='DSAKeyValue', pretty_print=pretty_print)
        if self.RSAKeyValue is not None:
            self.RSAKeyValue.export(outfile, level, namespaceprefix_='ds:', name_='RSAKeyValue', pretty_print=pretty_print)
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DSAKeyValue':
            obj_ = DSAKeyValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'DSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_DSAKeyValue'):
              self.add_DSAKeyValue(obj_.value)
            elif hasattr(self, 'set_DSAKeyValue'):
              self.set_DSAKeyValue(obj_.value)
        elif nodeName_ == 'RSAKeyValue':
            obj_ = RSAKeyValueType.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'RSAKeyValue', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_RSAKeyValue'):
              self.add_RSAKeyValue(obj_.value)
            elif hasattr(self, 'set_RSAKeyValue'):
              self.set_RSAKeyValue(obj_.value)
        elif nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class KeyValueType


class RetrievalMethodType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, URI=None, Type=None, Transforms=None):
        self.original_tagname_ = None
        self.URI = _cast(None, URI)
        self.Type = _cast(None, Type)
        self.Transforms = Transforms
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RetrievalMethodType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RetrievalMethodType.subclass:
            return RetrievalMethodType.subclass(*args_, **kwargs_)
        else:
            return RetrievalMethodType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Transforms(self): return self.Transforms
    def set_Transforms(self, Transforms): self.Transforms = Transforms
    def get_URI(self): return self.URI
    def set_URI(self, URI): self.URI = URI
    def get_Type(self): return self.Type
    def set_Type(self, Type): self.Type = Type
    def hasContent_(self):
        if (
            self.Transforms is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='RetrievalMethodType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RetrievalMethodType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RetrievalMethodType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='RetrievalMethodType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='RetrievalMethodType'):
        if self.URI is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            outfile.write(' URI=%s' % (quote_attrib(self.URI), ))
        if self.Type is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            outfile.write(' Type=%s' % (quote_attrib(self.Type), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='RetrievalMethodType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Transforms is not None:
            self.Transforms.export(outfile, level, namespaceprefix_='ds:', name_='Transforms', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('URI', node)
        if value is not None and 'URI' not in already_processed:
            already_processed.add('URI')
            self.URI = value
        value = find_attr_value_('Type', node)
        if value is not None and 'Type' not in already_processed:
            already_processed.add('Type')
            self.Type = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Transforms':
            obj_ = TransformsType.factory()
            obj_.build(child_)
            self.Transforms = obj_
            obj_.original_tagname_ = 'Transforms'
# end class RetrievalMethodType


class X509DataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerSerial=None, X509SKI=None, X509SubjectName=None, X509Certificate=None, X509CRL=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if X509IssuerSerial is None:
            self.X509IssuerSerial = []
        else:
            self.X509IssuerSerial = X509IssuerSerial
        if X509SKI is None:
            self.X509SKI = []
        else:
            self.X509SKI = X509SKI
        if X509SubjectName is None:
            self.X509SubjectName = []
        else:
            self.X509SubjectName = X509SubjectName
        if X509Certificate is None:
            self.X509Certificate = []
        else:
            self.X509Certificate = X509Certificate
        if X509CRL is None:
            self.X509CRL = []
        else:
            self.X509CRL = X509CRL
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509DataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509DataType.subclass:
            return X509DataType.subclass(*args_, **kwargs_)
        else:
            return X509DataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerSerial(self): return self.X509IssuerSerial
    def set_X509IssuerSerial(self, X509IssuerSerial): self.X509IssuerSerial = X509IssuerSerial
    def add_X509IssuerSerial(self, value): self.X509IssuerSerial.append(value)
    def insert_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial.insert(index, value)
    def replace_X509IssuerSerial_at(self, index, value): self.X509IssuerSerial[index] = value
    def get_X509SKI(self): return self.X509SKI
    def set_X509SKI(self, X509SKI): self.X509SKI = X509SKI
    def add_X509SKI(self, value): self.X509SKI.append(value)
    def insert_X509SKI_at(self, index, value): self.X509SKI.insert(index, value)
    def replace_X509SKI_at(self, index, value): self.X509SKI[index] = value
    def get_X509SubjectName(self): return self.X509SubjectName
    def set_X509SubjectName(self, X509SubjectName): self.X509SubjectName = X509SubjectName
    def add_X509SubjectName(self, value): self.X509SubjectName.append(value)
    def insert_X509SubjectName_at(self, index, value): self.X509SubjectName.insert(index, value)
    def replace_X509SubjectName_at(self, index, value): self.X509SubjectName[index] = value
    def get_X509Certificate(self): return self.X509Certificate
    def set_X509Certificate(self, X509Certificate): self.X509Certificate = X509Certificate
    def add_X509Certificate(self, value): self.X509Certificate.append(value)
    def insert_X509Certificate_at(self, index, value): self.X509Certificate.insert(index, value)
    def replace_X509Certificate_at(self, index, value): self.X509Certificate[index] = value
    def get_X509CRL(self): return self.X509CRL
    def set_X509CRL(self, X509CRL): self.X509CRL = X509CRL
    def add_X509CRL(self, value): self.X509CRL.append(value)
    def insert_X509CRL_at(self, index, value): self.X509CRL.insert(index, value)
    def replace_X509CRL_at(self, index, value): self.X509CRL[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.X509IssuerSerial or
            self.X509SKI or
            self.X509SubjectName or
            self.X509Certificate or
            self.X509CRL or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='X509DataType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509DataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='X509DataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='X509DataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='X509DataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='X509DataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for X509IssuerSerial_ in self.X509IssuerSerial:
            X509IssuerSerial_.export(outfile, level, namespaceprefix_, name_='X509IssuerSerial', pretty_print=pretty_print)
        for X509SKI_ in self.X509SKI:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:X509SKI>%s</ds:X509SKI>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509SKI_), input_name='X509SKI')), eol_))
        for X509SubjectName_ in self.X509SubjectName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:X509SubjectName>%s</ds:X509SubjectName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509SubjectName_), input_name='X509SubjectName')), eol_))
        for X509Certificate_ in self.X509Certificate:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:X509Certificate>%s</ds:X509Certificate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509Certificate_), input_name='X509Certificate')), eol_))
        for X509CRL_ in self.X509CRL:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:X509CRL>%s</ds:X509CRL>%s' % (self.gds_encode(self.gds_format_string(quote_xml(X509CRL_), input_name='X509CRL')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerSerial':
            obj_ = X509IssuerSerialType.factory()
            obj_.build(child_)
            self.X509IssuerSerial.append(obj_)
            obj_.original_tagname_ = 'X509IssuerSerial'
        elif nodeName_ == 'X509SKI':
            X509SKI_ = child_.text
            X509SKI_ = self.gds_validate_string(X509SKI_, node, 'X509SKI')
            self.X509SKI.append(X509SKI_)
        elif nodeName_ == 'X509SubjectName':
            X509SubjectName_ = child_.text
            X509SubjectName_ = self.gds_validate_string(X509SubjectName_, node, 'X509SubjectName')
            self.X509SubjectName.append(X509SubjectName_)
        elif nodeName_ == 'X509Certificate':
            X509Certificate_ = child_.text
            X509Certificate_ = self.gds_validate_string(X509Certificate_, node, 'X509Certificate')
            self.X509Certificate.append(X509Certificate_)
        elif nodeName_ == 'X509CRL':
            X509CRL_ = child_.text
            X509CRL_ = self.gds_validate_string(X509CRL_, node, 'X509CRL')
            self.X509CRL.append(X509CRL_)
        else:
            obj_ = self.gds_build_any(child_, 'X509DataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class X509DataType


class X509IssuerSerialType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, X509IssuerName=None, X509SerialNumber=None):
        self.original_tagname_ = None
        self.X509IssuerName = X509IssuerName
        self.X509SerialNumber = X509SerialNumber
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, X509IssuerSerialType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if X509IssuerSerialType.subclass:
            return X509IssuerSerialType.subclass(*args_, **kwargs_)
        else:
            return X509IssuerSerialType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_X509IssuerName(self): return self.X509IssuerName
    def set_X509IssuerName(self, X509IssuerName): self.X509IssuerName = X509IssuerName
    def get_X509SerialNumber(self): return self.X509SerialNumber
    def set_X509SerialNumber(self, X509SerialNumber): self.X509SerialNumber = X509SerialNumber
    def hasContent_(self):
        if (
            self.X509IssuerName is not None or
            self.X509SerialNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='X509IssuerSerialType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('X509IssuerSerialType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='X509IssuerSerialType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='X509IssuerSerialType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='X509IssuerSerialType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='X509IssuerSerialType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.X509IssuerName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:X509IssuerName>%s</ds:X509IssuerName>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.X509IssuerName), input_name='X509IssuerName')), eol_))
        if self.X509SerialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:X509SerialNumber>%s</ds:X509SerialNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.X509SerialNumber), input_name='X509SerialNumber')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'X509IssuerName':
            X509IssuerName_ = child_.text
            X509IssuerName_ = self.gds_validate_string(X509IssuerName_, node, 'X509IssuerName')
            self.X509IssuerName = X509IssuerName_
        elif nodeName_ == 'X509SerialNumber':
            X509SerialNumber_ = child_.text
            X509SerialNumber_ = self.gds_validate_string(X509SerialNumber_, node, 'X509SerialNumber')
            self.X509SerialNumber = X509SerialNumber_
# end class X509IssuerSerialType


class PGPDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PGPKeyID=None, PGPKeyPacket=None, anytypeobjs_=None):
        self.original_tagname_ = None
        self.PGPKeyID = PGPKeyID
        self.PGPKeyPacket = PGPKeyPacket
        if anytypeobjs_ is None:
            self.anytypeobjs_ = []
        else:
            self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PGPDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PGPDataType.subclass:
            return PGPDataType.subclass(*args_, **kwargs_)
        else:
            return PGPDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PGPKeyID(self): return self.PGPKeyID
    def set_PGPKeyID(self, PGPKeyID): self.PGPKeyID = PGPKeyID
    def get_PGPKeyPacket(self): return self.PGPKeyPacket
    def set_PGPKeyPacket(self, PGPKeyPacket): self.PGPKeyPacket = PGPKeyPacket
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def add_anytypeobjs_(self, value): self.anytypeobjs_.append(value)
    def insert_anytypeobjs_(self, index, value): self._anytypeobjs_[index] = value
    def hasContent_(self):
        if (
            self.PGPKeyID is not None or
            self.PGPKeyPacket is not None or
            self.anytypeobjs_
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='PGPDataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PGPDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PGPDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='PGPDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='PGPDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='PGPDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PGPKeyID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:PGPKeyID>%s</ds:PGPKeyID>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyID), input_name='PGPKeyID')), eol_))
        if self.PGPKeyPacket is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:PGPKeyPacket>%s</ds:PGPKeyPacket>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.PGPKeyPacket), input_name='PGPKeyPacket')), eol_))
        for obj_ in self.anytypeobjs_:
            obj_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PGPKeyID':
            PGPKeyID_ = child_.text
            PGPKeyID_ = self.gds_validate_string(PGPKeyID_, node, 'PGPKeyID')
            self.PGPKeyID = PGPKeyID_
        elif nodeName_ == 'PGPKeyPacket':
            PGPKeyPacket_ = child_.text
            PGPKeyPacket_ = self.gds_validate_string(PGPKeyPacket_, node, 'PGPKeyPacket')
            self.PGPKeyPacket = PGPKeyPacket_
        else:
            obj_ = self.gds_build_any(child_, 'PGPDataType')
            if obj_ is not None:
                self.add_anytypeobjs_(obj_)
# end class PGPDataType


class SPKIDataType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SPKISexp=None, anytypeobjs_=None):
        self.original_tagname_ = None
        if SPKISexp is None:
            self.SPKISexp = []
        else:
            self.SPKISexp = SPKISexp
        self.anytypeobjs_ = anytypeobjs_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SPKIDataType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SPKIDataType.subclass:
            return SPKIDataType.subclass(*args_, **kwargs_)
        else:
            return SPKIDataType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SPKISexp(self): return self.SPKISexp
    def set_SPKISexp(self, SPKISexp): self.SPKISexp = SPKISexp
    def add_SPKISexp(self, value): self.SPKISexp.append(value)
    def insert_SPKISexp_at(self, index, value): self.SPKISexp.insert(index, value)
    def replace_SPKISexp_at(self, index, value): self.SPKISexp[index] = value
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def hasContent_(self):
        if (
            self.SPKISexp or
            self.anytypeobjs_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SPKIDataType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SPKIDataType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SPKIDataType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SPKIDataType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SPKIDataType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SPKIDataType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SPKISexp_ in self.SPKISexp:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:SPKISexp>%s</ds:SPKISexp>%s' % (self.gds_encode(self.gds_format_string(quote_xml(SPKISexp_), input_name='SPKISexp')), eol_))
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SPKISexp':
            SPKISexp_ = child_.text
            SPKISexp_ = self.gds_validate_string(SPKISexp_, node, 'SPKISexp')
            self.SPKISexp.append(SPKISexp_)
        else:
            obj_ = self.gds_build_any(child_, 'SPKIDataType')
            if obj_ is not None:
                self.set_anytypeobjs_(obj_)
# end class SPKIDataType


class ObjectType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, MimeType=None, Encoding=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.MimeType = _cast(None, MimeType)
        self.Encoding = _cast(None, Encoding)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ObjectType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ObjectType.subclass:
            return ObjectType.subclass(*args_, **kwargs_)
        else:
            return ObjectType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_MimeType(self): return self.MimeType
    def set_MimeType(self, MimeType): self.MimeType = MimeType
    def get_Encoding(self): return self.Encoding
    def set_Encoding(self, Encoding): self.Encoding = Encoding
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='ObjectType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ObjectType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ObjectType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='ObjectType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ObjectType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.MimeType is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            outfile.write(' MimeType=%s' % (quote_attrib(self.MimeType), ))
        if self.Encoding is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            outfile.write(' Encoding=%s' % (quote_attrib(self.Encoding), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='ObjectType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
        value = find_attr_value_('MimeType', node)
        if value is not None and 'MimeType' not in already_processed:
            already_processed.add('MimeType')
            self.MimeType = value
        value = find_attr_value_('Encoding', node)
        if value is not None and 'Encoding' not in already_processed:
            already_processed.add('Encoding')
            self.Encoding = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class ObjectType


class ManifestType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Reference=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if Reference is None:
            self.Reference = []
        else:
            self.Reference = Reference
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ManifestType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ManifestType.subclass:
            return ManifestType.subclass(*args_, **kwargs_)
        else:
            return ManifestType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Reference(self): return self.Reference
    def set_Reference(self, Reference): self.Reference = Reference
    def add_Reference(self, value): self.Reference.append(value)
    def insert_Reference_at(self, index, value): self.Reference.insert(index, value)
    def replace_Reference_at(self, index, value): self.Reference[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.Reference
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='ManifestType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ManifestType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ManifestType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='ManifestType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='ManifestType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='ManifestType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Reference_ in self.Reference:
            Reference_.export(outfile, level, namespaceprefix_='ds:', name_='Reference', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Reference':
            obj_ = ReferenceType.factory()
            obj_.build(child_)
            self.Reference.append(obj_)
            obj_.original_tagname_ = 'Reference'
# end class ManifestType


class SignaturePropertiesType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, SignatureProperty=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        if SignatureProperty is None:
            self.SignatureProperty = []
        else:
            self.SignatureProperty = SignatureProperty
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertiesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertiesType.subclass:
            return SignaturePropertiesType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertiesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SignatureProperty(self): return self.SignatureProperty
    def set_SignatureProperty(self, SignatureProperty): self.SignatureProperty = SignatureProperty
    def add_SignatureProperty(self, value): self.SignatureProperty.append(value)
    def insert_SignatureProperty_at(self, index, value): self.SignatureProperty.insert(index, value)
    def replace_SignatureProperty_at(self, index, value): self.SignatureProperty[index] = value
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.SignatureProperty
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SignaturePropertiesType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertiesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignaturePropertiesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SignaturePropertiesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignaturePropertiesType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SignaturePropertiesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SignatureProperty_ in self.SignatureProperty:
            SignatureProperty_.export(outfile, level, namespaceprefix_='ds:', name_='SignatureProperty', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SignatureProperty':
            obj_ = SignaturePropertyType.factory()
            obj_.build(child_)
            self.SignatureProperty.append(obj_)
            obj_.original_tagname_ = 'SignatureProperty'
# end class SignaturePropertiesType


class SignaturePropertyType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Target=None, Id=None, anytypeobjs_=None, valueOf_=None, mixedclass_=None, content_=None):
        self.original_tagname_ = None
        self.Target = _cast(None, Target)
        self.Id = _cast(None, Id)
        self.anytypeobjs_ = anytypeobjs_
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SignaturePropertyType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SignaturePropertyType.subclass:
            return SignaturePropertyType.subclass(*args_, **kwargs_)
        else:
            return SignaturePropertyType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_anytypeobjs_(self): return self.anytypeobjs_
    def set_anytypeobjs_(self, anytypeobjs_): self.anytypeobjs_ = anytypeobjs_
    def get_Target(self): return self.Target
    def set_Target(self, Target): self.Target = Target
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.anytypeobjs_ is not None or
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='SignaturePropertyType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SignaturePropertyType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='SignaturePropertyType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='SignaturePropertyType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='SignaturePropertyType'):
        if self.Target is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            outfile.write(' Target=%s' % (quote_attrib(self.Target), ))
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='SignaturePropertyType', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespaceprefix_, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.anytypeobjs_ is not None:
            self.anytypeobjs_.export(outfile, level, namespaceprefix_, pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Target', node)
        if value is not None and 'Target' not in already_processed:
            already_processed.add('Target')
            self.Target = value
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == '':
            obj_ = __ANY__.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, '', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_'):
              self.add_(obj_.value)
            elif hasattr(self, 'set_'):
              self.set_(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class SignaturePropertyType


class DSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, P=None, Q=None, G=None, Y=None, J=None, Seed=None, PgenCounter=None):
        self.original_tagname_ = None
        self.P = P
        self.validate_CryptoBinary(self.P)
        self.Q = Q
        self.validate_CryptoBinary(self.Q)
        self.G = G
        self.validate_CryptoBinary(self.G)
        self.Y = Y
        self.validate_CryptoBinary(self.Y)
        self.J = J
        self.validate_CryptoBinary(self.J)
        self.Seed = Seed
        self.validate_CryptoBinary(self.Seed)
        self.PgenCounter = PgenCounter
        self.validate_CryptoBinary(self.PgenCounter)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DSAKeyValueType.subclass:
            return DSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return DSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_P(self): return self.P
    def set_P(self, P): self.P = P
    def get_Q(self): return self.Q
    def set_Q(self, Q): self.Q = Q
    def get_G(self): return self.G
    def set_G(self, G): self.G = G
    def get_Y(self): return self.Y
    def set_Y(self, Y): self.Y = Y
    def get_J(self): return self.J
    def set_J(self, J): self.J = J
    def get_Seed(self): return self.Seed
    def set_Seed(self, Seed): self.Seed = Seed
    def get_PgenCounter(self): return self.PgenCounter
    def set_PgenCounter(self, PgenCounter): self.PgenCounter = PgenCounter
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.P is not None or
            self.Q is not None or
            self.G is not None or
            self.Y is not None or
            self.J is not None or
            self.Seed is not None or
            self.PgenCounter is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='DSAKeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='DSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='DSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='DSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='DSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.P is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:P>%s</ds:P>%s' % (self.gds_format_base64(self.P, input_name='P'), eol_))
        if self.Q is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:Q>%s</ds:Q>%s' % (self.gds_format_base64(self.Q, input_name='Q'), eol_))
        if self.G is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:G>%s</ds:G>%s' % (self.gds_format_base64(self.G, input_name='G'), eol_))
        if self.Y is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:Y>%s</ds:Y>%s' % (self.gds_format_base64(self.Y, input_name='Y'), eol_))
        if self.J is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:J>%s</ds:J>%s' % (self.gds_format_base64(self.J, input_name='J'), eol_))
        if self.Seed is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:Seed>%s</ds:Seed>%s' % (self.gds_format_base64(self.Seed, input_name='Seed'), eol_))
        if self.PgenCounter is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:PgenCounter>%s</ds:PgenCounter>%s' % (self.gds_format_base64(self.PgenCounter, input_name='PgenCounter'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'P':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'P')
            else:
                bval_ = None
            self.P = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.P)
        elif nodeName_ == 'Q':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Q')
            else:
                bval_ = None
            self.Q = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Q)
        elif nodeName_ == 'G':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'G')
            else:
                bval_ = None
            self.G = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.G)
        elif nodeName_ == 'Y':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Y')
            else:
                bval_ = None
            self.Y = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Y)
        elif nodeName_ == 'J':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'J')
            else:
                bval_ = None
            self.J = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.J)
        elif nodeName_ == 'Seed':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Seed')
            else:
                bval_ = None
            self.Seed = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Seed)
        elif nodeName_ == 'PgenCounter':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'PgenCounter')
            else:
                bval_ = None
            self.PgenCounter = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.PgenCounter)
# end class DSAKeyValueType


class RSAKeyValueType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Modulus=None, Exponent=None):
        self.original_tagname_ = None
        self.Modulus = Modulus
        self.validate_CryptoBinary(self.Modulus)
        self.Exponent = Exponent
        self.validate_CryptoBinary(self.Exponent)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RSAKeyValueType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RSAKeyValueType.subclass:
            return RSAKeyValueType.subclass(*args_, **kwargs_)
        else:
            return RSAKeyValueType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Modulus(self): return self.Modulus
    def set_Modulus(self, Modulus): self.Modulus = Modulus
    def get_Exponent(self): return self.Exponent
    def set_Exponent(self, Exponent): self.Exponent = Exponent
    def validate_CryptoBinary(self, value):
        # Validate type CryptoBinary, a restriction on base64Binary.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.Modulus is not None or
            self.Exponent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='ds:', name_='RSAKeyValueType', namespacedef_=' xmlns:ds="http://www.w3.org/2000/09/xmldsig#" ', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RSAKeyValueType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RSAKeyValueType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='ds:', name_='RSAKeyValueType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='ds:', name_='RSAKeyValueType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='ds:', name_='RSAKeyValueType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Modulus is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:Modulus>%s</ds:Modulus>%s' % (self.gds_format_base64(self.Modulus, input_name='Modulus'), eol_))
        if self.Exponent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<ds:Exponent>%s</ds:Exponent>%s' % (self.gds_format_base64(self.Exponent, input_name='Exponent'), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Modulus':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Modulus')
            else:
                bval_ = None
            self.Modulus = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Modulus)
        elif nodeName_ == 'Exponent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'Exponent')
            else:
                bval_ = None
            self.Exponent = bval_
            # validate type CryptoBinary
            self.validate_CryptoBinary(self.Exponent)
# end class RSAKeyValueType


class evtAltCadastralType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, ideEvento=None, ideEmpregador=None, ideTrabalhador=None, alteracao=None):
        self.original_tagname_ = None
        self.Id = _cast(None, Id)
        self.ideEvento = ideEvento
        self.ideEmpregador = ideEmpregador
        self.ideTrabalhador = ideTrabalhador
        self.alteracao = alteracao
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, evtAltCadastralType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if evtAltCadastralType.subclass:
            return evtAltCadastralType.subclass(*args_, **kwargs_)
        else:
            return evtAltCadastralType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ideEvento(self): return self.ideEvento
    def set_ideEvento(self, ideEvento): self.ideEvento = ideEvento
    def get_ideEmpregador(self): return self.ideEmpregador
    def set_ideEmpregador(self, ideEmpregador): self.ideEmpregador = ideEmpregador
    def get_ideTrabalhador(self): return self.ideTrabalhador
    def set_ideTrabalhador(self, ideTrabalhador): self.ideTrabalhador = ideTrabalhador
    def get_alteracao(self): return self.alteracao
    def set_alteracao(self, alteracao): self.alteracao = alteracao
    def get_Id(self): return self.Id
    def set_Id(self, Id): self.Id = Id
    def hasContent_(self):
        if (
            self.ideEvento is not None or
            self.ideEmpregador is not None or
            self.ideTrabalhador is not None or
            self.alteracao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='evtAltCadastralType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('evtAltCadastralType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='evtAltCadastralType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='evtAltCadastralType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='evtAltCadastralType'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Id), input_name='Id')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='evtAltCadastralType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ideEvento is not None:
            self.ideEvento.export(outfile, level, namespaceprefix_, name_='ideEvento', pretty_print=pretty_print)
        if self.ideEmpregador is not None:
            self.ideEmpregador.export(outfile, level, namespaceprefix_, name_='ideEmpregador', pretty_print=pretty_print)
        if self.ideTrabalhador is not None:
            self.ideTrabalhador.export(outfile, level, namespaceprefix_, name_='ideTrabalhador', pretty_print=pretty_print)
        if self.alteracao is not None:
            self.alteracao.export(outfile, level, namespaceprefix_, name_='alteracao', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ideEvento':
            obj_ = TIdeEveTrab.factory()
            obj_.build(child_)
            self.ideEvento = obj_
            obj_.original_tagname_ = 'ideEvento'
        elif nodeName_ == 'ideEmpregador':
            obj_ = TEmpregador.factory()
            obj_.build(child_)
            self.ideEmpregador = obj_
            obj_.original_tagname_ = 'ideEmpregador'
        elif nodeName_ == 'ideTrabalhador':
            obj_ = ideTrabalhadorType.factory()
            obj_.build(child_)
            self.ideTrabalhador = obj_
            obj_.original_tagname_ = 'ideTrabalhador'
        elif nodeName_ == 'alteracao':
            obj_ = alteracaoType.factory()
            obj_.build(child_)
            self.alteracao = obj_
            obj_.original_tagname_ = 'alteracao'
# end class evtAltCadastralType


class ideTrabalhadorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, cpfTrab=None):
        self.original_tagname_ = None
        self.cpfTrab = cpfTrab
        self.validate_cpfTrabType(self.cpfTrab)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ideTrabalhadorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ideTrabalhadorType.subclass:
            return ideTrabalhadorType.subclass(*args_, **kwargs_)
        else:
            return ideTrabalhadorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_cpfTrab(self): return self.cpfTrab
    def set_cpfTrab(self, cpfTrab): self.cpfTrab = cpfTrab
    def validate_cpfTrabType(self, value):
        # Validate type cpfTrabType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 11:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on cpfTrabType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_cpfTrabType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_cpfTrabType_patterns_, ))
    validate_cpfTrabType_patterns_ = [['^\\d{11}$']]
    def hasContent_(self):
        if (
            self.cpfTrab is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='ideTrabalhadorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ideTrabalhadorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ideTrabalhadorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='ideTrabalhadorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ideTrabalhadorType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='ideTrabalhadorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.cpfTrab is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cpfTrab>%s</cpfTrab>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cpfTrab), input_name='cpfTrab')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'cpfTrab':
            cpfTrab_ = child_.text
            cpfTrab_ = self.gds_validate_string(cpfTrab_, node, 'cpfTrab')
            self.cpfTrab = cpfTrab_
            # validate type cpfTrabType
            self.validate_cpfTrabType(self.cpfTrab)
# end class ideTrabalhadorType


class alteracaoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dtAlteracao=None, dadosTrabalhador=None):
        self.original_tagname_ = None
        if isinstance(dtAlteracao, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtAlteracao, '%Y-%m-%d').date()
        else:
            initvalue_ = dtAlteracao
        self.dtAlteracao = initvalue_
        self.dadosTrabalhador = dadosTrabalhador
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, alteracaoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if alteracaoType.subclass:
            return alteracaoType.subclass(*args_, **kwargs_)
        else:
            return alteracaoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dtAlteracao(self): return self.dtAlteracao
    def set_dtAlteracao(self, dtAlteracao): self.dtAlteracao = dtAlteracao
    def get_dadosTrabalhador(self): return self.dadosTrabalhador
    def set_dadosTrabalhador(self, dadosTrabalhador): self.dadosTrabalhador = dadosTrabalhador
    def validate_dtAlteracaoType(self, value):
        # Validate type dtAlteracaoType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.dtAlteracao is not None or
            self.dadosTrabalhador is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='alteracaoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('alteracaoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='alteracaoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='alteracaoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='alteracaoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='alteracaoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dtAlteracao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtAlteracao>%s</dtAlteracao>%s' % (self.gds_format_date(self.dtAlteracao, input_name='dtAlteracao'), eol_))
        if self.dadosTrabalhador is not None:
            self.dadosTrabalhador.export(outfile, level, namespaceprefix_, name_='dadosTrabalhador', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dtAlteracao':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtAlteracao = dval_
            # validate type dtAlteracaoType
            self.validate_dtAlteracaoType(self.dtAlteracao)
        elif nodeName_ == 'dadosTrabalhador':
            obj_ = dadosTrabalhadorType.factory()
            obj_.build(child_)
            self.dadosTrabalhador = obj_
            obj_.original_tagname_ = 'dadosTrabalhador'
# end class alteracaoType


class dadosTrabalhadorType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, nisTrab=None, nmTrab=None, sexo=None, racaCor=None, estCiv=None, grauInstr=None, nmSoc=None, nascimento=None, documentos=None, endereco=None, trabEstrangeiro=None, infoDeficiencia=None, dependente=None, aposentadoria=None, contato=None):
        self.original_tagname_ = None
        self.nisTrab = nisTrab
        self.validate_nisTrabType(self.nisTrab)
        self.nmTrab = nmTrab
        self.validate_nmTrabType(self.nmTrab)
        self.sexo = sexo
        self.validate_sexoType(self.sexo)
        self.racaCor = racaCor
        self.validate_racaCorType(self.racaCor)
        self.estCiv = estCiv
        self.validate_estCivType(self.estCiv)
        self.grauInstr = grauInstr
        self.validate_grauInstrType(self.grauInstr)
        self.nmSoc = nmSoc
        self.validate_nmSocType(self.nmSoc)
        self.nascimento = nascimento
        self.documentos = documentos
        self.endereco = endereco
        self.trabEstrangeiro = trabEstrangeiro
        self.infoDeficiencia = infoDeficiencia
        if dependente is None:
            self.dependente = []
        else:
            self.dependente = dependente
        self.aposentadoria = aposentadoria
        self.contato = contato
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, dadosTrabalhadorType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if dadosTrabalhadorType.subclass:
            return dadosTrabalhadorType.subclass(*args_, **kwargs_)
        else:
            return dadosTrabalhadorType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_nisTrab(self): return self.nisTrab
    def set_nisTrab(self, nisTrab): self.nisTrab = nisTrab
    def get_nmTrab(self): return self.nmTrab
    def set_nmTrab(self, nmTrab): self.nmTrab = nmTrab
    def get_sexo(self): return self.sexo
    def set_sexo(self, sexo): self.sexo = sexo
    def get_racaCor(self): return self.racaCor
    def set_racaCor(self, racaCor): self.racaCor = racaCor
    def get_estCiv(self): return self.estCiv
    def set_estCiv(self, estCiv): self.estCiv = estCiv
    def get_grauInstr(self): return self.grauInstr
    def set_grauInstr(self, grauInstr): self.grauInstr = grauInstr
    def get_nmSoc(self): return self.nmSoc
    def set_nmSoc(self, nmSoc): self.nmSoc = nmSoc
    def get_nascimento(self): return self.nascimento
    def set_nascimento(self, nascimento): self.nascimento = nascimento
    def get_documentos(self): return self.documentos
    def set_documentos(self, documentos): self.documentos = documentos
    def get_endereco(self): return self.endereco
    def set_endereco(self, endereco): self.endereco = endereco
    def get_trabEstrangeiro(self): return self.trabEstrangeiro
    def set_trabEstrangeiro(self, trabEstrangeiro): self.trabEstrangeiro = trabEstrangeiro
    def get_infoDeficiencia(self): return self.infoDeficiencia
    def set_infoDeficiencia(self, infoDeficiencia): self.infoDeficiencia = infoDeficiencia
    def get_dependente(self): return self.dependente
    def set_dependente(self, dependente): self.dependente = dependente
    def add_dependente(self, value): self.dependente.append(value)
    def insert_dependente_at(self, index, value): self.dependente.insert(index, value)
    def replace_dependente_at(self, index, value): self.dependente[index] = value
    def get_aposentadoria(self): return self.aposentadoria
    def set_aposentadoria(self, aposentadoria): self.aposentadoria = aposentadoria
    def get_contato(self): return self.contato
    def set_contato(self, contato): self.contato = contato
    def validate_nisTrabType(self, value):
        # Validate type nisTrabType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nisTrabType' % {"value" : value.encode("utf-8")} )
    def validate_nmTrabType(self, value):
        # Validate type nmTrabType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nmTrabType' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nmTrabType' % {"value" : value.encode("utf-8")} )
    def validate_sexoType(self, value):
        # Validate type sexoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on sexoType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_sexoType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_sexoType_patterns_, ))
    validate_sexoType_patterns_ = [['^[F|M]$']]
    def validate_racaCorType(self, value):
        # Validate type racaCorType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_racaCorType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_racaCorType_patterns_, ))
    validate_racaCorType_patterns_ = [['^\\d$']]
    def validate_estCivType(self, value):
        # Validate type estCivType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_estCivType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_estCivType_patterns_, ))
    validate_estCivType_patterns_ = [['^\\d$']]
    def validate_grauInstrType(self, value):
        # Validate type grauInstrType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_grauInstrType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_grauInstrType_patterns_, ))
    validate_grauInstrType_patterns_ = [['^\\d{2}$']]
    def validate_nmSocType(self, value):
        # Validate type nmSocType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nmSocType' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nmSocType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.nisTrab is not None or
            self.nmTrab is not None or
            self.sexo is not None or
            self.racaCor is not None or
            self.estCiv is not None or
            self.grauInstr is not None or
            self.nmSoc is not None or
            self.nascimento is not None or
            self.documentos is not None or
            self.endereco is not None or
            self.trabEstrangeiro is not None or
            self.infoDeficiencia is not None or
            self.dependente or
            self.aposentadoria is not None or
            self.contato is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='dadosTrabalhadorType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('dadosTrabalhadorType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='dadosTrabalhadorType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='dadosTrabalhadorType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='dadosTrabalhadorType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='dadosTrabalhadorType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.nisTrab is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nisTrab>%s</nisTrab>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nisTrab), input_name='nisTrab')), eol_))
        if self.nmTrab is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nmTrab>%s</nmTrab>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nmTrab), input_name='nmTrab')), eol_))
        if self.sexo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<sexo>%s</sexo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.sexo), input_name='sexo')), eol_))
        if self.racaCor is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<racaCor>%s</racaCor>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.racaCor), input_name='racaCor')), eol_))
        if self.estCiv is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<estCiv>%s</estCiv>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.estCiv), input_name='estCiv')), eol_))
        if self.grauInstr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<grauInstr>%s</grauInstr>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.grauInstr), input_name='grauInstr')), eol_))
        if self.nmSoc is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nmSoc>%s</nmSoc>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nmSoc), input_name='nmSoc')), eol_))
        if self.nascimento is not None:
            self.nascimento.export(outfile, level, namespaceprefix_, name_='nascimento', pretty_print=pretty_print)
        if self.documentos is not None:
            self.documentos.export(outfile, level, namespaceprefix_, name_='documentos', pretty_print=pretty_print)
        if self.endereco is not None:
            self.endereco.export(outfile, level, namespaceprefix_, name_='endereco', pretty_print=pretty_print)
        if self.trabEstrangeiro is not None:
            self.trabEstrangeiro.export(outfile, level, namespaceprefix_, name_='trabEstrangeiro', pretty_print=pretty_print)
        if self.infoDeficiencia is not None:
            self.infoDeficiencia.export(outfile, level, namespaceprefix_, name_='infoDeficiencia', pretty_print=pretty_print)
        for dependente_ in self.dependente:
            dependente_.export(outfile, level, namespaceprefix_, name_='dependente', pretty_print=pretty_print)
        if self.aposentadoria is not None:
            self.aposentadoria.export(outfile, level, namespaceprefix_, name_='aposentadoria', pretty_print=pretty_print)
        if self.contato is not None:
            self.contato.export(outfile, level, namespaceprefix_, name_='contato', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'nisTrab':
            nisTrab_ = child_.text
            nisTrab_ = self.gds_validate_string(nisTrab_, node, 'nisTrab')
            self.nisTrab = nisTrab_
            # validate type nisTrabType
            self.validate_nisTrabType(self.nisTrab)
        elif nodeName_ == 'nmTrab':
            nmTrab_ = child_.text
            nmTrab_ = self.gds_validate_string(nmTrab_, node, 'nmTrab')
            self.nmTrab = nmTrab_
            # validate type nmTrabType
            self.validate_nmTrabType(self.nmTrab)
        elif nodeName_ == 'sexo':
            sexo_ = child_.text
            sexo_ = self.gds_validate_string(sexo_, node, 'sexo')
            self.sexo = sexo_
            # validate type sexoType
            self.validate_sexoType(self.sexo)
        elif nodeName_ == 'racaCor':
            racaCor_ = child_.text
            racaCor_ = self.gds_validate_string(racaCor_, node, 'racaCor')
            self.racaCor = racaCor_
            # validate type racaCorType
            self.validate_racaCorType(self.racaCor)
        elif nodeName_ == 'estCiv':
            estCiv_ = child_.text
            estCiv_ = self.gds_validate_string(estCiv_, node, 'estCiv')
            self.estCiv = estCiv_
            # validate type estCivType
            self.validate_estCivType(self.estCiv)
        elif nodeName_ == 'grauInstr':
            grauInstr_ = child_.text
            grauInstr_ = self.gds_validate_string(grauInstr_, node, 'grauInstr')
            self.grauInstr = grauInstr_
            # validate type grauInstrType
            self.validate_grauInstrType(self.grauInstr)
        elif nodeName_ == 'nmSoc':
            nmSoc_ = child_.text
            nmSoc_ = self.gds_validate_string(nmSoc_, node, 'nmSoc')
            self.nmSoc = nmSoc_
            # validate type nmSocType
            self.validate_nmSocType(self.nmSoc)
        elif nodeName_ == 'nascimento':
            obj_ = nascimentoType.factory()
            obj_.build(child_)
            self.nascimento = obj_
            obj_.original_tagname_ = 'nascimento'
        elif nodeName_ == 'documentos':
            obj_ = documentosType.factory()
            obj_.build(child_)
            self.documentos = obj_
            obj_.original_tagname_ = 'documentos'
        elif nodeName_ == 'endereco':
            obj_ = enderecoType.factory()
            obj_.build(child_)
            self.endereco = obj_
            obj_.original_tagname_ = 'endereco'
        elif nodeName_ == 'trabEstrangeiro':
            obj_ = TTrabEstrang.factory()
            obj_.build(child_)
            self.trabEstrangeiro = obj_
            obj_.original_tagname_ = 'trabEstrangeiro'
        elif nodeName_ == 'infoDeficiencia':
            obj_ = infoDeficienciaType.factory()
            obj_.build(child_)
            self.infoDeficiencia = obj_
            obj_.original_tagname_ = 'infoDeficiencia'
        elif nodeName_ == 'dependente':
            obj_ = TDependente.factory()
            obj_.build(child_)
            self.dependente.append(obj_)
            obj_.original_tagname_ = 'dependente'
        elif nodeName_ == 'aposentadoria':
            obj_ = aposentadoriaType.factory()
            obj_.build(child_)
            self.aposentadoria = obj_
            obj_.original_tagname_ = 'aposentadoria'
        elif nodeName_ == 'contato':
            obj_ = TContato.factory()
            obj_.build(child_)
            self.contato = obj_
            obj_.original_tagname_ = 'contato'
# end class dadosTrabalhadorType


class nascimentoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dtNascto=None, codMunic=None, uf=None, paisNascto=None, paisNac=None, nmMae=None, nmPai=None):
        self.original_tagname_ = None
        if isinstance(dtNascto, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dtNascto, '%Y-%m-%d').date()
        else:
            initvalue_ = dtNascto
        self.dtNascto = initvalue_
        self.codMunic = codMunic
        self.validate_codMunicType(self.codMunic)
        self.uf = uf
        self.validate_ufType(self.uf)
        self.paisNascto = paisNascto
        self.validate_paisNasctoType(self.paisNascto)
        self.paisNac = paisNac
        self.validate_paisNacType(self.paisNac)
        self.nmMae = nmMae
        self.validate_nmMaeType(self.nmMae)
        self.nmPai = nmPai
        self.validate_nmPaiType(self.nmPai)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, nascimentoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if nascimentoType.subclass:
            return nascimentoType.subclass(*args_, **kwargs_)
        else:
            return nascimentoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dtNascto(self): return self.dtNascto
    def set_dtNascto(self, dtNascto): self.dtNascto = dtNascto
    def get_codMunic(self): return self.codMunic
    def set_codMunic(self, codMunic): self.codMunic = codMunic
    def get_uf(self): return self.uf
    def set_uf(self, uf): self.uf = uf
    def get_paisNascto(self): return self.paisNascto
    def set_paisNascto(self, paisNascto): self.paisNascto = paisNascto
    def get_paisNac(self): return self.paisNac
    def set_paisNac(self, paisNac): self.paisNac = paisNac
    def get_nmMae(self): return self.nmMae
    def set_nmMae(self, nmMae): self.nmMae = nmMae
    def get_nmPai(self): return self.nmPai
    def set_nmPai(self, nmPai): self.nmPai = nmPai
    def validate_dtNasctoType(self, value):
        # Validate type dtNasctoType, a restriction on xs:date.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_codMunicType(self, value):
        # Validate type codMunicType, a restriction on xs:integer.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_ufType(self, value):
        # Validate type ufType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['AC', 'AL', 'AP', 'AM', 'BA', 'CE', 'DF', 'ES', 'GO', 'MA', 'MT', 'MS', 'MG', 'PA', 'PB', 'PR', 'PE', 'PI', 'RJ', 'RN', 'RS', 'RO', 'RR', 'SC', 'SP', 'SE', 'TO']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ufType' % {"value" : value.encode("utf-8")} )
    def validate_paisNasctoType(self, value):
        # Validate type paisNasctoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on paisNasctoType' % {"value" : value.encode("utf-8")} )
    def validate_paisNacType(self, value):
        # Validate type paisNacType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 3:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on paisNacType' % {"value" : value.encode("utf-8")} )
    def validate_nmMaeType(self, value):
        # Validate type nmMaeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nmMaeType' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nmMaeType' % {"value" : value.encode("utf-8")} )
    def validate_nmPaiType(self, value):
        # Validate type nmPaiType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on nmPaiType' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on nmPaiType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.dtNascto is not None or
            self.codMunic is not None or
            self.uf is not None or
            self.paisNascto is not None or
            self.paisNac is not None or
            self.nmMae is not None or
            self.nmPai is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='nascimentoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('nascimentoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='nascimentoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='nascimentoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='nascimentoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='nascimentoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.dtNascto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dtNascto>%s</dtNascto>%s' % (self.gds_format_date(self.dtNascto, input_name='dtNascto'), eol_))
        if self.codMunic is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<codMunic>%s</codMunic>%s' % (self.gds_format_integer(self.codMunic, input_name='codMunic'), eol_))
        if self.uf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<uf>%s</uf>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.uf), input_name='uf')), eol_))
        if self.paisNascto is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<paisNascto>%s</paisNascto>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.paisNascto), input_name='paisNascto')), eol_))
        if self.paisNac is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<paisNac>%s</paisNac>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.paisNac), input_name='paisNac')), eol_))
        if self.nmMae is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nmMae>%s</nmMae>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nmMae), input_name='nmMae')), eol_))
        if self.nmPai is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<nmPai>%s</nmPai>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.nmPai), input_name='nmPai')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'dtNascto':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.dtNascto = dval_
            # validate type dtNasctoType
            self.validate_dtNasctoType(self.dtNascto)
        elif nodeName_ == 'codMunic' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'codMunic')
            self.codMunic = ival_
            # validate type codMunicType
            self.validate_codMunicType(self.codMunic)
        elif nodeName_ == 'uf':
            uf_ = child_.text
            uf_ = self.gds_validate_string(uf_, node, 'uf')
            self.uf = uf_
            # validate type ufType
            self.validate_ufType(self.uf)
        elif nodeName_ == 'paisNascto':
            paisNascto_ = child_.text
            paisNascto_ = self.gds_validate_string(paisNascto_, node, 'paisNascto')
            self.paisNascto = paisNascto_
            # validate type paisNasctoType
            self.validate_paisNasctoType(self.paisNascto)
        elif nodeName_ == 'paisNac':
            paisNac_ = child_.text
            paisNac_ = self.gds_validate_string(paisNac_, node, 'paisNac')
            self.paisNac = paisNac_
            # validate type paisNacType
            self.validate_paisNacType(self.paisNac)
        elif nodeName_ == 'nmMae':
            nmMae_ = child_.text
            nmMae_ = self.gds_validate_string(nmMae_, node, 'nmMae')
            self.nmMae = nmMae_
            # validate type nmMaeType
            self.validate_nmMaeType(self.nmMae)
        elif nodeName_ == 'nmPai':
            nmPai_ = child_.text
            nmPai_ = self.gds_validate_string(nmPai_, node, 'nmPai')
            self.nmPai = nmPai_
            # validate type nmPaiType
            self.validate_nmPaiType(self.nmPai)
# end class nascimentoType


class documentosType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CTPS=None, RIC=None, RG=None, RNE=None, OC=None, CNH=None):
        self.original_tagname_ = None
        self.CTPS = CTPS
        self.RIC = RIC
        self.RG = RG
        self.RNE = RNE
        self.OC = OC
        self.CNH = CNH
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, documentosType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if documentosType.subclass:
            return documentosType.subclass(*args_, **kwargs_)
        else:
            return documentosType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_CTPS(self): return self.CTPS
    def set_CTPS(self, CTPS): self.CTPS = CTPS
    def get_RIC(self): return self.RIC
    def set_RIC(self, RIC): self.RIC = RIC
    def get_RG(self): return self.RG
    def set_RG(self, RG): self.RG = RG
    def get_RNE(self): return self.RNE
    def set_RNE(self, RNE): self.RNE = RNE
    def get_OC(self): return self.OC
    def set_OC(self, OC): self.OC = OC
    def get_CNH(self): return self.CNH
    def set_CNH(self, CNH): self.CNH = CNH
    def hasContent_(self):
        if (
            self.CTPS is not None or
            self.RIC is not None or
            self.RG is not None or
            self.RNE is not None or
            self.OC is not None or
            self.CNH is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='documentosType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('documentosType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='documentosType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='documentosType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='documentosType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='documentosType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CTPS is not None:
            self.CTPS.export(outfile, level, namespaceprefix_, name_='CTPS', pretty_print=pretty_print)
        if self.RIC is not None:
            self.RIC.export(outfile, level, namespaceprefix_, name_='RIC', pretty_print=pretty_print)
        if self.RG is not None:
            self.RG.export(outfile, level, namespaceprefix_, name_='RG', pretty_print=pretty_print)
        if self.RNE is not None:
            self.RNE.export(outfile, level, namespaceprefix_, name_='RNE', pretty_print=pretty_print)
        if self.OC is not None:
            self.OC.export(outfile, level, namespaceprefix_, name_='OC', pretty_print=pretty_print)
        if self.CNH is not None:
            self.CNH.export(outfile, level, namespaceprefix_, name_='CNH', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CTPS':
            obj_ = TCtps.factory()
            obj_.build(child_)
            self.CTPS = obj_
            obj_.original_tagname_ = 'CTPS'
        elif nodeName_ == 'RIC':
            obj_ = TRic.factory()
            obj_.build(child_)
            self.RIC = obj_
            obj_.original_tagname_ = 'RIC'
        elif nodeName_ == 'RG':
            obj_ = TRg.factory()
            obj_.build(child_)
            self.RG = obj_
            obj_.original_tagname_ = 'RG'
        elif nodeName_ == 'RNE':
            obj_ = TRne.factory()
            obj_.build(child_)
            self.RNE = obj_
            obj_.original_tagname_ = 'RNE'
        elif nodeName_ == 'OC':
            obj_ = TOc.factory()
            obj_.build(child_)
            self.OC = obj_
            obj_.original_tagname_ = 'OC'
        elif nodeName_ == 'CNH':
            obj_ = TCnh.factory()
            obj_.build(child_)
            self.CNH = obj_
            obj_.original_tagname_ = 'CNH'
# end class documentosType


class enderecoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, brasil=None, exterior=None):
        self.original_tagname_ = None
        self.brasil = brasil
        self.exterior = exterior
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, enderecoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if enderecoType.subclass:
            return enderecoType.subclass(*args_, **kwargs_)
        else:
            return enderecoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_brasil(self): return self.brasil
    def set_brasil(self, brasil): self.brasil = brasil
    def get_exterior(self): return self.exterior
    def set_exterior(self, exterior): self.exterior = exterior
    def hasContent_(self):
        if (
            self.brasil is not None or
            self.exterior is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='enderecoType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('enderecoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='enderecoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='enderecoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='enderecoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='enderecoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.brasil is not None:
            self.brasil.export(outfile, level, namespaceprefix_, name_='brasil', pretty_print=pretty_print)
        if self.exterior is not None:
            self.exterior.export(outfile, level, namespaceprefix_, name_='exterior', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'brasil':
            obj_ = TEnderecoBrasil.factory()
            obj_.build(child_)
            self.brasil = obj_
            obj_.original_tagname_ = 'brasil'
        elif nodeName_ == 'exterior':
            obj_ = TEnderecoExterior.factory()
            obj_.build(child_)
            self.exterior = obj_
            obj_.original_tagname_ = 'exterior'
# end class enderecoType


class infoDeficienciaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, defFisica=None, defVisual=None, defAuditiva=None, defMental=None, defIntelectual=None, reabReadap=None, infoCota=None, observacao=None):
        self.original_tagname_ = None
        self.defFisica = defFisica
        self.validate_defFisicaType(self.defFisica)
        self.defVisual = defVisual
        self.validate_defVisualType(self.defVisual)
        self.defAuditiva = defAuditiva
        self.validate_defAuditivaType(self.defAuditiva)
        self.defMental = defMental
        self.validate_defMentalType(self.defMental)
        self.defIntelectual = defIntelectual
        self.validate_defIntelectualType(self.defIntelectual)
        self.reabReadap = reabReadap
        self.validate_reabReadapType(self.reabReadap)
        self.infoCota = infoCota
        self.validate_infoCotaType(self.infoCota)
        self.observacao = observacao
        self.validate_observacaoType(self.observacao)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoDeficienciaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoDeficienciaType.subclass:
            return infoDeficienciaType.subclass(*args_, **kwargs_)
        else:
            return infoDeficienciaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_defFisica(self): return self.defFisica
    def set_defFisica(self, defFisica): self.defFisica = defFisica
    def get_defVisual(self): return self.defVisual
    def set_defVisual(self, defVisual): self.defVisual = defVisual
    def get_defAuditiva(self): return self.defAuditiva
    def set_defAuditiva(self, defAuditiva): self.defAuditiva = defAuditiva
    def get_defMental(self): return self.defMental
    def set_defMental(self, defMental): self.defMental = defMental
    def get_defIntelectual(self): return self.defIntelectual
    def set_defIntelectual(self, defIntelectual): self.defIntelectual = defIntelectual
    def get_reabReadap(self): return self.reabReadap
    def set_reabReadap(self, reabReadap): self.reabReadap = reabReadap
    def get_infoCota(self): return self.infoCota
    def set_infoCota(self, infoCota): self.infoCota = infoCota
    def get_observacao(self): return self.observacao
    def set_observacao(self, observacao): self.observacao = observacao
    def validate_defFisicaType(self, value):
        # Validate type defFisicaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on defFisicaType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_defFisicaType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_defFisicaType_patterns_, ))
    validate_defFisicaType_patterns_ = [['^[N|S]$']]
    def validate_defVisualType(self, value):
        # Validate type defVisualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on defVisualType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_defVisualType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_defVisualType_patterns_, ))
    validate_defVisualType_patterns_ = [['^[N|S]$']]
    def validate_defAuditivaType(self, value):
        # Validate type defAuditivaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on defAuditivaType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_defAuditivaType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_defAuditivaType_patterns_, ))
    validate_defAuditivaType_patterns_ = [['^[N|S]$']]
    def validate_defMentalType(self, value):
        # Validate type defMentalType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on defMentalType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_defMentalType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_defMentalType_patterns_, ))
    validate_defMentalType_patterns_ = [['^[N|S]$']]
    def validate_defIntelectualType(self, value):
        # Validate type defIntelectualType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on defIntelectualType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_defIntelectualType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_defIntelectualType_patterns_, ))
    validate_defIntelectualType_patterns_ = [['^[N|S]$']]
    def validate_reabReadapType(self, value):
        # Validate type reabReadapType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on reabReadapType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_reabReadapType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_reabReadapType_patterns_, ))
    validate_reabReadapType_patterns_ = [['^[N|S]$']]
    def validate_infoCotaType(self, value):
        # Validate type infoCotaType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_infoCotaType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_infoCotaType_patterns_, ))
    validate_infoCotaType_patterns_ = [['^[N|S]$']]
    def validate_observacaoType(self, value):
        # Validate type observacaoType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on observacaoType' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on observacaoType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.defFisica is not None or
            self.defVisual is not None or
            self.defAuditiva is not None or
            self.defMental is not None or
            self.defIntelectual is not None or
            self.reabReadap is not None or
            self.infoCota is not None or
            self.observacao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='infoDeficienciaType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoDeficienciaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoDeficienciaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='infoDeficienciaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoDeficienciaType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='infoDeficienciaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.defFisica is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<defFisica>%s</defFisica>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.defFisica), input_name='defFisica')), eol_))
        if self.defVisual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<defVisual>%s</defVisual>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.defVisual), input_name='defVisual')), eol_))
        if self.defAuditiva is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<defAuditiva>%s</defAuditiva>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.defAuditiva), input_name='defAuditiva')), eol_))
        if self.defMental is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<defMental>%s</defMental>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.defMental), input_name='defMental')), eol_))
        if self.defIntelectual is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<defIntelectual>%s</defIntelectual>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.defIntelectual), input_name='defIntelectual')), eol_))
        if self.reabReadap is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<reabReadap>%s</reabReadap>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.reabReadap), input_name='reabReadap')), eol_))
        if self.infoCota is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<infoCota>%s</infoCota>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.infoCota), input_name='infoCota')), eol_))
        if self.observacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<observacao>%s</observacao>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.observacao), input_name='observacao')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'defFisica':
            defFisica_ = child_.text
            defFisica_ = self.gds_validate_string(defFisica_, node, 'defFisica')
            self.defFisica = defFisica_
            # validate type defFisicaType
            self.validate_defFisicaType(self.defFisica)
        elif nodeName_ == 'defVisual':
            defVisual_ = child_.text
            defVisual_ = self.gds_validate_string(defVisual_, node, 'defVisual')
            self.defVisual = defVisual_
            # validate type defVisualType
            self.validate_defVisualType(self.defVisual)
        elif nodeName_ == 'defAuditiva':
            defAuditiva_ = child_.text
            defAuditiva_ = self.gds_validate_string(defAuditiva_, node, 'defAuditiva')
            self.defAuditiva = defAuditiva_
            # validate type defAuditivaType
            self.validate_defAuditivaType(self.defAuditiva)
        elif nodeName_ == 'defMental':
            defMental_ = child_.text
            defMental_ = self.gds_validate_string(defMental_, node, 'defMental')
            self.defMental = defMental_
            # validate type defMentalType
            self.validate_defMentalType(self.defMental)
        elif nodeName_ == 'defIntelectual':
            defIntelectual_ = child_.text
            defIntelectual_ = self.gds_validate_string(defIntelectual_, node, 'defIntelectual')
            self.defIntelectual = defIntelectual_
            # validate type defIntelectualType
            self.validate_defIntelectualType(self.defIntelectual)
        elif nodeName_ == 'reabReadap':
            reabReadap_ = child_.text
            reabReadap_ = self.gds_validate_string(reabReadap_, node, 'reabReadap')
            self.reabReadap = reabReadap_
            # validate type reabReadapType
            self.validate_reabReadapType(self.reabReadap)
        elif nodeName_ == 'infoCota':
            infoCota_ = child_.text
            infoCota_ = self.gds_validate_string(infoCota_, node, 'infoCota')
            self.infoCota = infoCota_
            # validate type infoCotaType
            self.validate_infoCotaType(self.infoCota)
        elif nodeName_ == 'observacao':
            observacao_ = child_.text
            observacao_ = self.gds_validate_string(observacao_, node, 'observacao')
            self.observacao = observacao_
            # validate type observacaoType
            self.validate_observacaoType(self.observacao)
# end class infoDeficienciaType


class aposentadoriaType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, trabAposent=None):
        self.original_tagname_ = None
        self.trabAposent = trabAposent
        self.validate_trabAposentType(self.trabAposent)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, aposentadoriaType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if aposentadoriaType.subclass:
            return aposentadoriaType.subclass(*args_, **kwargs_)
        else:
            return aposentadoriaType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_trabAposent(self): return self.trabAposent
    def set_trabAposent(self, trabAposent): self.trabAposent = trabAposent
    def validate_trabAposentType(self, value):
        # Validate type trabAposentType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 1:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on trabAposentType' % {"value" : value.encode("utf-8")} )
            if not self.gds_validate_simple_patterns(
                    self.validate_trabAposentType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_trabAposentType_patterns_, ))
    validate_trabAposentType_patterns_ = [['^[N|S]$']]
    def hasContent_(self):
        if (
            self.trabAposent is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', name_='aposentadoriaType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('aposentadoriaType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='aposentadoriaType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_='', name_='aposentadoriaType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='aposentadoriaType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', name_='aposentadoriaType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.trabAposent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<trabAposent>%s</trabAposent>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.trabAposent), input_name='trabAposent')), eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'trabAposent':
            trabAposent_ = child_.text
            trabAposent_ = self.gds_validate_string(trabAposent_, node, 'trabAposent')
            self.trabAposent = trabAposent_
            # validate type trabAposentType
            self.validate_trabAposentType(self.trabAposent)
# end class aposentadoriaType


GDSClassesMapping = {
    'CanonicalizationMethod': CanonicalizationMethodType,
    'DSAKeyValue': DSAKeyValueType,
    'DigestMethod': DigestMethodType,
    'KeyInfo': KeyInfoType,
    'KeyValue': KeyValueType,
    'Manifest': ManifestType,
    'Object': ObjectType,
    'PGPData': PGPDataType,
    'RSAKeyValue': RSAKeyValueType,
    'Reference': ReferenceType,
    'RetrievalMethod': RetrievalMethodType,
    'SPKIData': SPKIDataType,
    'Signature': SignatureType,
    'SignatureMethod': SignatureMethodType,
    'SignatureProperties': SignaturePropertiesType,
    'SignatureProperty': SignaturePropertyType,
    'SignatureValue': SignatureValueType,
    'SignedInfo': SignedInfoType,
    'Transform': TransformType,
    'Transforms': TransformsType,
    'X509Data': X509DataType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'eSocial'
        rootClass = eSocial
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from evtAltCadastral import *\n\n')
        sys.stdout.write('import evtAltCadastral as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CanonicalizationMethodType",
    "DSAKeyValueType",
    "DigestMethodType",
    "KeyInfoType",
    "KeyValueType",
    "ManifestType",
    "ObjectType",
    "PGPDataType",
    "RSAKeyValueType",
    "ReferenceType",
    "RetrievalMethodType",
    "SPKIDataType",
    "SignatureMethodType",
    "SignaturePropertiesType",
    "SignaturePropertyType",
    "SignatureType",
    "SignatureValueType",
    "SignedInfoType",
    "TCnh",
    "TContato",
    "TCtps",
    "TDependente",
    "TEmpregador",
    "TEnderecoBrasil",
    "TEnderecoExterior",
    "TIdeEveTrab",
    "TOc",
    "TRg",
    "TRic",
    "TRne",
    "TTrabEstrang",
    "TransformType",
    "TransformsType",
    "X509DataType",
    "X509IssuerSerialType",
    "alteracaoType",
    "aposentadoriaType",
    "dadosTrabalhadorType",
    "documentosType",
    "eSocial",
    "enderecoType",
    "evtAltCadastralType",
    "ideTrabalhadorType",
    "infoDeficienciaType",
    "nascimentoType"
]
